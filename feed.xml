<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://bitbrain.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bitbrain.github.io/" rel="alternate" type="text/html" /><updated>2024-11-03T00:30:56+00:00</updated><id>https://bitbrain.github.io/feed.xml</id><title type="html">bitbrain</title><subtitle>Miguel is a software engineer and indie game developer currently based in the UK. &lt;br/&gt;He occasionally blogs about software design, continuous integration and game development with Godot Engine.
</subtitle><author><name>bitbrain</name></author><entry><title type="html">Godot File Compression</title><link href="https://bitbrain.github.io/2024/07/10/godot-file-compression.html" rel="alternate" type="text/html" title="Godot File Compression" /><published>2024-07-10T00:00:00+00:00</published><updated>2024-07-10T00:00:00+00:00</updated><id>https://bitbrain.github.io/2024/07/10/godot-file-compression</id><content type="html" xml:base="https://bitbrain.github.io/2024/07/10/godot-file-compression.html"><![CDATA[<p>I am maintaining a <a href="https://godotengine.org">Godot Engine</a> addon called <a href="https://github.com/bitbrain/pandora">Pandora</a> and maintainers reported a very strange bug that I solved in <a href="https://github.com/bitbrain/pandora/pull/185">this pull request</a>:</p>

<p>The compression of the <code class="language-plaintext highlighter-rouge">data.pandora</code> file was not working and in this blog article I want to explain how compression in Godot works, how I solved it and maybe you can learn a thing or two!</p>

<p><a href="https://github.com/bitbrain/pandora"><img src="/public/media/pandora-logo.svg" alt="pandora-logo" /></a></p>

<h1 id="why-compression">Why compression?</h1>

<p>Compression is by no means a way to encrypt your data. Someone with malicious intent <strong>can</strong> decompress the contents and modify it to their needs. However, compression is still useful to reduce the size of the final <code class="language-plaintext highlighter-rouge">.pck</code> file that gets shipped with your Godot game. Also, as an added bonus, it will be much harder for someone without technical knowledge to modify e.g. raw json files.</p>

<h1 id="storing-json">Storing JSON</h1>

<p>Imagine you have some json like so:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"item"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Golden Axe"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>and you want to store that to a file. Usually, in Godot you can do this:</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">'</span><span class="s1">item.json'</span><span class="p">,</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">WRITE</span><span class="p">)</span>
</code></pre></div></div>

<p>This then allows you to write to the file our item like so:</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">data</span><span class="p">:</span><span class="kt">Dictionary</span> <span class="o">=</span> <span class="p">{</span> <span class="n">item</span><span class="p">:</span> <span class="s2">"Golden Axe"</span> <span class="p">}</span>
<span class="n">file</span><span class="o">.</span><span class="n">store_string</span><span class="p">(</span><span class="n">JSON</span><span class="o">.</span><span class="n">stringify</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="n">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="storing-compressed-files">Storing compressed files</h1>

<p>So far, so good. Now, how would we actually store compressed files? The code looks surprisingly similar!</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">open_compressed</span><span class="p">(</span><span class="s2">'</span><span class="s1">item.json'</span><span class="p">,</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">WRITE</span><span class="p">)</span>
<span class="k">var</span> <span class="n">data</span><span class="p">:</span><span class="kt">Dictionary</span> <span class="o">=</span> <span class="p">{</span> <span class="n">item</span><span class="p">:</span> <span class="s2">"Golden Axe"</span> <span class="p">}</span>
<span class="n">file</span><span class="o">.</span><span class="n">store_string</span><span class="p">(</span><span class="n">JSON</span><span class="o">.</span><span class="n">stringify</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="n">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>So, what is the problem here if this code works fine? It has to do with exporting your game in Godot!</p>

<h1 id="exporting-addon-files">Exporting addon files</h1>

<p>When someone uses a Godot addon that relies on specific files (such as <code class="language-plaintext highlighter-rouge">data.pandora</code> files for storing state), those files will <strong>not</strong> be automatically exported.</p>

<blockquote>
  <p>Pandora does not use a <code class="language-plaintext highlighter-rouge">.json</code> but rather <code class="language-plaintext highlighter-rouge">.pandora</code> extension on purpose to discourage people from modifying it manually.</p>
</blockquote>

<p>When exporting the game, one would need to define the exported files explicitly in the export settings:</p>

<p><img src="/public/media/godot-export.png" alt="godot-export" /></p>

<p>However, this is not sustainable and having to remember to register random files whenever you want to export your game does not scale. This is why Godot introduced the <code class="language-plaintext highlighter-rouge">EditorExportPlugin</code>:</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">@</span><span class="k">tool</span>
<span class="k">extends</span> <span class="n">EditorPlugin</span>

<span class="k">func</span> <span class="nf">_enter_tree</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
   <span class="n">add_export_plugin</span><span class="p">(</span><span class="n">MyExportPlugin</span><span class="o">.</span><span class="n">new</span><span class="p">())</span>

<span class="k">class</span> <span class="nc">MyExportPlugin</span> <span class="k">extends</span> <span class="n">EditorExportPlugin</span><span class="p">:</span>

	<span class="k">func</span> <span class="nf">_export_begin</span><span class="p">(</span><span class="n">features</span><span class="p">:</span> <span class="n">PackedStringArray</span><span class="p">,</span> <span class="n">is_debug</span><span class="p">:</span> <span class="kt">bool</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="n">flags</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span>
    <span class="c1"># add_file("some-file.json", data, false)</span>
    <span class="k">pass</span>

	<span class="k">func</span> <span class="nf">_get_name</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">:</span>
		<span class="k">return</span> <span class="s2">"MyExportPlugin"</span>
</code></pre></div></div>

<p>As you can see, this plugin gets shipped with the addon and it allows the addon creator to specify additional files that should be auto-exported when someone uses the addon. In Pandora, the <code class="language-plaintext highlighter-rouge">data.pandora</code> file should not be compressed by default when being used in the editor but only for <strong>release builds</strong>. Reason being is that it is much more friendly for version control systems like <a href="https://git-scm.com">git</a> and it also makes debugging things easier within Pandora itself.</p>

<p>The <code class="language-plaintext highlighter-rouge">is_debug</code> flag tells us if someone intents to export a game as debug or release build, so we can use the flag to conditionally add the file.</p>

<blockquote>
  <p>Note: the <code class="language-plaintext highlighter-rouge">path</code> argument of the <code class="language-plaintext highlighter-rouge">_export_begin</code> method is the path where the game will be exported to.</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">add_file</code> signature requires a <code class="language-plaintext highlighter-rouge">PackedByteArray</code> as a 2nd argument, which effectively is the bytes of the file that should be stored away:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func _export_begin(features: PackedStringArray, is_debug: bool, path: String, flags: int):
    var pandora_path = "res://data.pandora"
    # open the uncompressed normal file from the project folder
    var file = FileAccess.open(pandora_path, FileAccess.READ)
    # let's get the bytes from the file
    var data:PackedByteArray = file.get_buffer(file.get_length())
    add_file(pandora_path, data, false)
    # always remember to close the file
    file.close()
</code></pre></div></div>

<p>so, how do we store the file compressed? We cannot use <code class="language-plaintext highlighter-rouge">open_compressed</code> here because the file we are trying to store compressed is uncompressed:</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">pandora_path</span> <span class="o">=</span> <span class="s2">"res://data.pandora"</span>
  <span class="c1"># This will fail! `data.pandora` file is not compressed!</span>
  <span class="k">var</span> <span class="n">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">open_compressed</span><span class="p">(</span><span class="n">pandora_path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">READ</span><span class="p">)</span>
</code></pre></div></div>

<p>A first idea I had was to <a href="https://docs.godotengine.org/en/stable/classes/class_packedbytearray.html#class-packedbytearray-method-compress">compress</a> the <code class="language-plaintext highlighter-rouge">PackedByteArray</code> itself:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var data:PackedByteArray = file.get_buffer(file.get_length())
add_file(pandora_path, data.compress(), false)
</code></pre></div></div>

<p>the assumption is that the exported file can be opened like this when running your <strong>release</strong> build of your game at runtime:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var data = FileAccess.open_compressed("res://data.pandora", FileAccess.READ)
</code></pre></div></div>

<p>However, that fails with error code <code class="language-plaintext highlighter-rouge">15</code>. What on earth is that error? I highly recommend bookmarking the <a href="https://docs.godotengine.org">official Godot docs</a>, because they are extremely useful, especially for situations like this: we find our answer in the ancient archives under the <code class="language-plaintext highlighter-rouge">Error</code> section (<a href="https://docs.godotengine.org/en/stable/classes/class_%40globalscope.html#enum-globalscope-error">link</a>):</p>

<blockquote>
  <p>Error ERR_FILE_UNRECOGNIZED = 15</p>

  <p>File: Unrecognized error.</p>
</blockquote>

<p>Ah, so Godot itself does not recognize the file as compressed!</p>

<h1 id="solving-the-mystery">Solving the mystery</h1>

<p>I reached out on the official <strong>Godot Contributor chat</strong> and <a href="https://chat.godotengine.org/channel/editor?msg=n8yvre5oNTSg8n4Rg">contributor bruvzg kindly provided me</a> with this information:</p>

<blockquote>
  <p>[…] you can replicate compressed file format if you want it to be readable with open_compressed, it’s not complex, the mine difference compressing is done in blocks, format is:</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>magic
    char[4] "GCPF"

header
    uint32_t compression_mode (Compression::MODE_ZSTD by default)
    uint32_t block_size (4096 by default)
    uint32_t uncompressed_size

block compressed sizes, number of blocks = (uncompressed_size / block_size) + 1
    uint32_t block_sizes[]

followed by compressed block data, same as calling `compress` for each source `block_size`
</code></pre></div></div>

<p>In case you are confused now, stay with me - this all will make sense in a bit. The format you are seeing there is <strong>not code</strong> but it describes <strong>bytes</strong> that need to be present in the compressed file for Godot to understand it. Picture it like a recipe or instruction manual that is stored at the beginning of your file and Godot will read that to understand what to do with your compressed content.</p>

<h1 id="what-are-bytes-anyway">What are bytes anyway?</h1>

<p>To decompress for a bit (pun intended), let us take a step back and understand how our exported file actually looks like. Remember, we previously attempted to export our file like so:</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">data</span><span class="p">:</span><span class="n">PackedByteArray</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">get_buffer</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">get_length</span><span class="p">())</span>
<span class="n">add_file</span><span class="p">(</span><span class="n">pandora_path</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">compress</span><span class="p">(),</span> <span class="bp">false</span><span class="p">)</span>
</code></pre></div></div>

<p>We can use a nifty tool like <a href="https://github.com/DmitriySalnikov/GodotPCKExplorer">GodotPCKExplorer</a> to inspect + unpack exported Godot builds. This becomes especially useful to investigate the export logic of our <code class="language-plaintext highlighter-rouge">EditorExportPlugin</code>. Opening the <code class="language-plaintext highlighter-rouge">pck</code> file to our exported <strong>release</strong> build of our game indeed shows the file:</p>

<p><img src="/public/media/godot-pck-explorer.png" alt="godot-pck-explorer" /></p>

<p>We then can click <code class="language-plaintext highlighter-rouge">Extract &gt; Extract Selected</code> and save the file to a location of our choice. This then allows us to inspect the file furter. Opening that file in a text editor shows us an odd character:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "item": "Golden Pickaxe"
}
</code></pre></div></div>

<p>This is because the file is compressed - there is a much better way at looking at the file itself, which is by using a hex editor, such as <a href="https://hexed.it/">hexed.it</a>:
<img src="/public/media/data-pandora-bytes.png" alt="data-pandora-bytes" /></p>

<p>A <code class="language-plaintext highlighter-rouge">char</code> is precisely 1 byte, and looking at our compression spec again, Godot expects the first 4 bytes to consist of the following characters: <code class="language-plaintext highlighter-rouge">GCPF</code>, which would look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>47 43 50 46
</code></pre></div></div>

<p>In case a file does not start with these exact bytes, Godot will not be able to open it correctly. The same goes for the next byte headers: <code class="language-plaintext highlighter-rouge">uint32_t</code> is precisely 4 bytes, meaning the next 12 bytes should contain the <code class="language-plaintext highlighter-rouge">compression_mode</code>, <code class="language-plaintext highlighter-rouge">block_size</code> and <code class="language-plaintext highlighter-rouge">uncompressed_size</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>47 43 50 46 00 00 00 00 00 10 00 00 1E 00 00 00
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">00 00 00 00</code> is the compression mode - we pick the default which is MODE_ZSTD (0)</li>
  <li><code class="language-plaintext highlighter-rouge">00 10 00 00</code> represents 4096 as the block size</li>
  <li><code class="language-plaintext highlighter-rouge">1E 00 00 00</code> is the uncompressed size of our file = 30 bytes</li>
</ul>

<p>The remaining bytes will be the compressed data that gets produced by compressing our <code class="language-plaintext highlighter-rouge">PackedByteArray</code>.</p>

<h1 id="applying-the-knowledge">Applying the knowledge</h1>

<p>With our gained knowledge, let us create a new script that is able to compress any text into Godot compatible <code class="language-plaintext highlighter-rouge">PackedByteArray</code> format!</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The block size which we hardcode</span>
<span class="k">const</span> <span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">4096</span>
<span class="c1"># Godot Compression magic keyword</span>
<span class="k">const</span> <span class="n">MAGIC</span> <span class="o">=</span> <span class="s2">"GCPF"</span>


<span class="c1">## magic</span>
<span class="c1">##     char[4] "GCPF"</span>
<span class="c1">##</span>
<span class="c1">## header</span>
<span class="c1">##     uint32_t compression_mode (Compression::MODE_ZSTD by default)</span>
<span class="c1">##     uint32_t block_size (4096 by default)</span>
<span class="c1">##     uint32_t uncompressed_size</span>
<span class="c1">##</span>
<span class="c1">## block compressed sizes, number of blocks = (uncompressed_size / block_size) + 1</span>
<span class="c1">##     uint32_t block_sizes[]</span>
<span class="c1">##</span>
<span class="c1">## followed by compressed block data, same as calling `compress` for each source `block_size`</span>
<span class="k">static</span> <span class="k">func</span> <span class="nf">compress</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="n">compression_mode</span><span class="p">:</span><span class="n">FileAccess</span><span class="o">.</span><span class="n">CompressionMode</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">COMPRESSION_FASTLZ</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">PackedByteArray</span><span class="p">:</span>
	<span class="k">var</span> <span class="n">data</span> <span class="o">=</span> <span class="n">_encode_string</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
	<span class="k">var</span> <span class="n">uncompressed_size</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">size</span><span class="p">()</span>

	<span class="k">var</span> <span class="n">num_blocks</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">uncompressed_size</span><span class="p">)</span> <span class="o">/</span> <span class="n">BLOCK_SIZE</span><span class="p">))</span>

	<span class="k">var</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">PackedByteArray</span><span class="p">()</span>

	<span class="n">buffer</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="n">_encode_string</span><span class="p">(</span><span class="n">MAGIC</span><span class="p">))</span>

	<span class="n">buffer</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="n">_encode_uint32</span><span class="p">(</span><span class="n">compression_mode</span><span class="p">))</span>
	<span class="n">buffer</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="n">_encode_uint32</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">))</span>
	<span class="n">buffer</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="n">_encode_uint32</span><span class="p">(</span><span class="n">uncompressed_size</span><span class="p">))</span>

	<span class="k">var</span> <span class="n">block_sizes</span> <span class="o">=</span> <span class="n">PackedByteArray</span><span class="p">()</span>
	<span class="k">var</span> <span class="n">compressed_blocks</span> <span class="o">=</span> <span class="p">[]</span>

	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_blocks</span><span class="p">):</span>
		<span class="k">var</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">BLOCK_SIZE</span>
		<span class="k">var</span> <span class="n">end</span> <span class="o">=</span> <span class="nb">min</span><span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="n">uncompressed_size</span><span class="p">)</span>
		<span class="k">var</span> <span class="n">block_data</span> <span class="o">=</span> <span class="n">PackedByteArray</span><span class="p">()</span>
		<span class="k">var</span> <span class="n">block_index</span> <span class="o">=</span> <span class="n">start</span>
		<span class="k">while</span> <span class="n">block_index</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>
			<span class="n">block_data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">block_index</span><span class="p">])</span>
			<span class="n">block_index</span> <span class="o">+=</span> <span class="mi">1</span>

		<span class="k">var</span> <span class="n">compressed_block</span> <span class="o">=</span> <span class="n">block_data</span><span class="o">.</span><span class="n">compress</span><span class="p">(</span><span class="n">compression_mode</span><span class="p">)</span>
		<span class="n">block_sizes</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="n">_encode_uint32</span><span class="p">(</span><span class="n">compressed_block</span><span class="o">.</span><span class="n">size</span><span class="p">()))</span>
		<span class="n">compressed_blocks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">compressed_block</span><span class="p">)</span>

	<span class="n">buffer</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="n">block_sizes</span><span class="p">)</span>

	<span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">compressed_blocks</span><span class="p">:</span>
		<span class="n">buffer</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>

	<span class="k">return</span> <span class="n">buffer</span>

<span class="c1"># Godot is Little Endian by default, so the order here is crucial!</span>
<span class="k">static</span> <span class="k">func</span> <span class="nf">_encode_uint32</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="kt">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">PackedByteArray</span><span class="p">:</span>
	<span class="k">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">PackedByteArray</span><span class="p">()</span>
	<span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>
	<span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">value</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>
	<span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">value</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>
	<span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">value</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">arr</span>


<span class="k">static</span> <span class="k">func</span> <span class="nf">_encode_string</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">PackedByteArray</span><span class="p">:</span>
	<span class="k">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">PackedByteArray</span><span class="p">()</span>
	<span class="k">for</span> <span class="nb">char</span> <span class="ow">in</span> <span class="n">value</span><span class="p">:</span>
		<span class="n">arr</span><span class="o">.</span><span class="n">append_array</span><span class="p">(</span><span class="nb">char</span><span class="o">.</span><span class="n">to_ascii_buffer</span><span class="p">())</span>
	<span class="k">return</span> <span class="n">arr</span>
</code></pre></div></div>

<p>With this component, we can now easily adjust our previous code:</p>

<div class="language-gd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">Compression</span> <span class="o">=</span> <span class="nb">preload</span><span class="p">(</span><span class="s2">'</span><span class="s1">compression.gd'</span><span class="p">)</span>

<span class="k">func</span> <span class="nf">_export_begin</span><span class="p">(</span><span class="n">features</span><span class="p">:</span> <span class="n">PackedStringArray</span><span class="p">,</span> <span class="n">is_debug</span><span class="p">:</span> <span class="kt">bool</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="n">flags</span><span class="p">:</span> <span class="kt">int</span><span class="p">):</span>
    <span class="k">var</span> <span class="n">pandora_path</span> <span class="o">=</span> <span class="s2">"res://data.pandora"</span>
    <span class="c1"># open the uncompressed normal file from the project folder</span>
    <span class="k">var</span> <span class="n">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">pandora_path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="o">.</span><span class="n">READ</span><span class="p">)</span>
    <span class="k">var</span> <span class="n">text</span><span class="p">:</span><span class="kt">String</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">get_as_text</span><span class="p">()</span>
    <span class="c1"># compress the file into the correct format so Godot can load it again</span>
    <span class="k">var</span> <span class="n">compressed</span><span class="p">:</span><span class="n">PackedByteArray</span> <span class="o">=</span> <span class="n">Compression</span><span class="o">.</span><span class="n">compress</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">add_file</span><span class="p">(</span><span class="n">pandora_path</span><span class="p">,</span> <span class="n">compressed</span><span class="p">,</span> <span class="bp">false</span><span class="p">)</span>
    <span class="n">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>With the above trick, you can now open the file via <code class="language-plaintext highlighter-rouge">open_compressed</code> without problems!</p>

<p>I hope you enjoyed this little sneakpeak into the development of my addon. Feel free to checkout <a href="https://github.com/bitbrain/pandora">pandora</a> for yourself. I also have <a href="https://youtube.com/@bitbraindev">a Youtube channel</a> where I document my gamedev journey - check it out!</p>]]></content><author><name>bitbrain</name></author><category term="godot" /><category term="addon" /><category term="gamedev" /><summary type="html"><![CDATA[I am maintaining a Godot Engine addon called Pandora and maintainers reported a very strange bug that I solved in this pull request: The compression of the data.pandora file was not working and in this blog article I want to explain how compression in Godot works, how I solved it and maybe you can learn a thing or two! Why compression? Compression is by no means a way to encrypt your data. Someone with malicious intent can decompress the contents and modify it to their needs. However, compression is still useful to reduce the size of the final .pck file that gets shipped with your Godot game. Also, as an added bonus, it will be much harder for someone without technical knowledge to modify e.g. raw json files. Storing JSON Imagine you have some json like so: { "item": "Golden Axe" } and you want to store that to a file. Usually, in Godot you can do this: var file = FileAccess.open('item.json', FileAccess.WRITE) This then allows you to write to the file our item like so: var data:Dictionary = { item: "Golden Axe" } file.store_string(JSON.stringify(data)) file.close() Storing compressed files So far, so good. Now, how would we actually store compressed files? The code looks surprisingly similar! var file = FileAccess.open_compressed('item.json', FileAccess.WRITE) var data:Dictionary = { item: "Golden Axe" } file.store_string(JSON.stringify(data)) file.close() So, what is the problem here if this code works fine? It has to do with exporting your game in Godot! Exporting addon files When someone uses a Godot addon that relies on specific files (such as data.pandora files for storing state), those files will not be automatically exported. Pandora does not use a .json but rather .pandora extension on purpose to discourage people from modifying it manually. When exporting the game, one would need to define the exported files explicitly in the export settings: However, this is not sustainable and having to remember to register random files whenever you want to export your game does not scale. This is why Godot introduced the EditorExportPlugin: @tool extends EditorPlugin func _enter_tree() -&gt; void: add_export_plugin(MyExportPlugin.new()) class MyExportPlugin extends EditorExportPlugin: func _export_begin(features: PackedStringArray, is_debug: bool, path: String, flags: int): # add_file("some-file.json", data, false) pass func _get_name() -&gt; String: return "MyExportPlugin" As you can see, this plugin gets shipped with the addon and it allows the addon creator to specify additional files that should be auto-exported when someone uses the addon. In Pandora, the data.pandora file should not be compressed by default when being used in the editor but only for release builds. Reason being is that it is much more friendly for version control systems like git and it also makes debugging things easier within Pandora itself. The is_debug flag tells us if someone intents to export a game as debug or release build, so we can use the flag to conditionally add the file. Note: the path argument of the _export_begin method is the path where the game will be exported to. The add_file signature requires a PackedByteArray as a 2nd argument, which effectively is the bytes of the file that should be stored away: func _export_begin(features: PackedStringArray, is_debug: bool, path: String, flags: int): var pandora_path = "res://data.pandora" # open the uncompressed normal file from the project folder var file = FileAccess.open(pandora_path, FileAccess.READ) # let's get the bytes from the file var data:PackedByteArray = file.get_buffer(file.get_length()) add_file(pandora_path, data, false) # always remember to close the file file.close() so, how do we store the file compressed? We cannot use open_compressed here because the file we are trying to store compressed is uncompressed: var pandora_path = "res://data.pandora" # This will fail! `data.pandora` file is not compressed! var file = FileAccess.open_compressed(pandora_path, FileAccess.READ) A first idea I had was to compress the PackedByteArray itself: var data:PackedByteArray = file.get_buffer(file.get_length()) add_file(pandora_path, data.compress(), false) the assumption is that the exported file can be opened like this when running your release build of your game at runtime: var data = FileAccess.open_compressed("res://data.pandora", FileAccess.READ) However, that fails with error code 15. What on earth is that error? I highly recommend bookmarking the official Godot docs, because they are extremely useful, especially for situations like this: we find our answer in the ancient archives under the Error section (link): Error ERR_FILE_UNRECOGNIZED = 15 File: Unrecognized error. Ah, so Godot itself does not recognize the file as compressed! Solving the mystery I reached out on the official Godot Contributor chat and contributor bruvzg kindly provided me with this information: […] you can replicate compressed file format if you want it to be readable with open_compressed, it’s not complex, the mine difference compressing is done in blocks, format is: magic char[4] "GCPF" header uint32_t compression_mode (Compression::MODE_ZSTD by default) uint32_t block_size (4096 by default) uint32_t uncompressed_size block compressed sizes, number of blocks = (uncompressed_size / block_size) + 1 uint32_t block_sizes[] followed by compressed block data, same as calling `compress` for each source `block_size` In case you are confused now, stay with me - this all will make sense in a bit. The format you are seeing there is not code but it describes bytes that need to be present in the compressed file for Godot to understand it. Picture it like a recipe or instruction manual that is stored at the beginning of your file and Godot will read that to understand what to do with your compressed content. What are bytes anyway? To decompress for a bit (pun intended), let us take a step back and understand how our exported file actually looks like. Remember, we previously attempted to export our file like so: var data:PackedByteArray = file.get_buffer(file.get_length()) add_file(pandora_path, data.compress(), false) We can use a nifty tool like GodotPCKExplorer to inspect + unpack exported Godot builds. This becomes especially useful to investigate the export logic of our EditorExportPlugin. Opening the pck file to our exported release build of our game indeed shows the file: We then can click Extract &gt; Extract Selected and save the file to a location of our choice. This then allows us to inspect the file furter. Opening that file in a text editor shows us an odd character: { "item": "Golden Pickaxe" } This is because the file is compressed - there is a much better way at looking at the file itself, which is by using a hex editor, such as hexed.it: A char is precisely 1 byte, and looking at our compression spec again, Godot expects the first 4 bytes to consist of the following characters: GCPF, which would look like this: 47 43 50 46 In case a file does not start with these exact bytes, Godot will not be able to open it correctly. The same goes for the next byte headers: uint32_t is precisely 4 bytes, meaning the next 12 bytes should contain the compression_mode, block_size and uncompressed_size: 47 43 50 46 00 00 00 00 00 10 00 00 1E 00 00 00 00 00 00 00 is the compression mode - we pick the default which is MODE_ZSTD (0) 00 10 00 00 represents 4096 as the block size 1E 00 00 00 is the uncompressed size of our file = 30 bytes The remaining bytes will be the compressed data that gets produced by compressing our PackedByteArray. Applying the knowledge With our gained knowledge, let us create a new script that is able to compress any text into Godot compatible PackedByteArray format! # The block size which we hardcode const BLOCK_SIZE = 4096 # Godot Compression magic keyword const MAGIC = "GCPF" ## magic ## char[4] "GCPF" ## ## header ## uint32_t compression_mode (Compression::MODE_ZSTD by default) ## uint32_t block_size (4096 by default) ## uint32_t uncompressed_size ## ## block compressed sizes, number of blocks = (uncompressed_size / block_size) + 1 ## uint32_t block_sizes[] ## ## followed by compressed block data, same as calling `compress` for each source `block_size` static func compress(text: String, compression_mode:FileAccess.CompressionMode = FileAccess.COMPRESSION_FASTLZ) -&gt; PackedByteArray: var data = _encode_string(text) var uncompressed_size = data.size() var num_blocks = int(ceil(float(uncompressed_size) / BLOCK_SIZE)) var buffer = PackedByteArray() buffer.append_array(_encode_string(MAGIC)) buffer.append_array(_encode_uint32(compression_mode)) buffer.append_array(_encode_uint32(BLOCK_SIZE)) buffer.append_array(_encode_uint32(uncompressed_size)) var block_sizes = PackedByteArray() var compressed_blocks = [] for i in range(num_blocks): var start = i * BLOCK_SIZE var end = min((i + 1) * BLOCK_SIZE, uncompressed_size) var block_data = PackedByteArray() var block_index = start while block_index &lt; end: block_data.append(data[block_index]) block_index += 1 var compressed_block = block_data.compress(compression_mode) block_sizes.append_array(_encode_uint32(compressed_block.size())) compressed_blocks.append(compressed_block) buffer.append_array(block_sizes) for block in compressed_blocks: buffer.append_array(block) return buffer # Godot is Little Endian by default, so the order here is crucial! static func _encode_uint32(value: int) -&gt; PackedByteArray: var arr = PackedByteArray() arr.append(value &amp; 0xFF) arr.append((value &gt;&gt; 8) &amp; 0xFF) arr.append((value &gt;&gt; 16) &amp; 0xFF) arr.append((value &gt;&gt; 24) &amp; 0xFF) return arr static func _encode_string(value: String) -&gt; PackedByteArray: var arr = PackedByteArray() for char in value: arr.append_array(char.to_ascii_buffer()) return arr With this component, we can now easily adjust our previous code: const Compression = preload('compression.gd') func _export_begin(features: PackedStringArray, is_debug: bool, path: String, flags: int): var pandora_path = "res://data.pandora" # open the uncompressed normal file from the project folder var file = FileAccess.open(pandora_path, FileAccess.READ) var text:String = file.get_as_text() # compress the file into the correct format so Godot can load it again var compressed:PackedByteArray = Compression.compress(text) add_file(pandora_path, compressed, false) file.close() With the above trick, you can now open the file via open_compressed without problems! I hope you enjoyed this little sneakpeak into the development of my addon. Feel free to checkout pandora for yourself. I also have a Youtube channel where I document my gamedev journey - check it out!]]></summary></entry><entry><title type="html">Godot Version Compatibility: A Guide for Addon Developers</title><link href="https://bitbrain.github.io/2023/09/03/godot-addon-compatibility.html" rel="alternate" type="text/html" title="Godot Version Compatibility: A Guide for Addon Developers" /><published>2023-09-03T00:00:00+00:00</published><updated>2023-09-03T00:00:00+00:00</updated><id>https://bitbrain.github.io/2023/09/03/godot-addon-compatibility</id><content type="html" xml:base="https://bitbrain.github.io/2023/09/03/godot-addon-compatibility.html"><![CDATA[<p><strong>Godot addons offer a powerful way to extend the engine’s functionality without having to modify its core.</strong> This flexibility empowers the community to create custom solutions without burdening the engine itself. However, as addon developers, we must strike a balance between compatibility and functionality. This article explores the trade-offs involved, focusing primarily on Godot Engine 4.x.</p>

<h2 id="the-anatomy-of-a-godot-release">The Anatomy of a Godot Release</h2>

<p>Godot currently has two <strong>major</strong> versions in circulation:</p>

<ul>
  <li><strong>Godot 3.x</strong>: This older version is known for its stability and backward compatibility. It’s particularly useful for projects that require lighter hardware capabilities, such as mobile games.</li>
  <li><strong>Godot 4.x</strong>: This is the newer, more advanced version, boasting superior graphics capabilities through Vulkan and significant reworks of various systems.</li>
</ul>

<p>Each major version consists of <strong>minor</strong> versions (e.g., Godot 4.0, 4.1, etc.) that mainly introduce new features and bug fixes. These are followed by <strong>maintenance</strong> versions (e.g., 4.0.1, 4.1.2) focusing on bug fixes, compatibility improvements, and minor UX enhancements. Typically, maintenance releases are non-API-breaking.</p>

<h2 id="crafting-a-compatibility-matrix">Crafting a Compatibility Matrix</h2>

<p>When developing addons, it’s crucial to consider which Godot features you’ll be using from the outset. Suppose you have an addon compatible with all minor versions of Godot 4.x. Your initial compatibility matrix might look like this:</p>

<table>
  <thead>
    <tr>
      <th>Godot Version</th>
      <th>Addon Version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4.0.x</td>
      <td>1.0.x</td>
    </tr>
    <tr>
      <td>4.1.x</td>
      <td>1.0.x</td>
    </tr>
  </tbody>
</table>

<p>Let’s say Godot 4.1 introduces a <a href="https://github.com/godotengine/godot/pull/76264">new feature</a> called <strong>static variables</strong>:</p>
<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class_name</span> <span class="n">CustomClass</span> <span class="k">extends</span> <span class="n">RefCounted</span>

<span class="c1"># shared between instances of this class</span>
<span class="k">static</span> <span class="k">var</span> <span class="n">my_var</span><span class="p">:</span><span class="kt">int</span>
</code></pre></div></div>
<p>Using this feature would make your addon incompatible with Godot 4.0.x. You now have three options:</p>

<h3 id="option-1-maintain-support-for-godot-40">Option 1: Maintain Support for Godot 4.0</h3>

<blockquote>
  <p>✅ Maximum flexibility<br />
⛔️ High administrative overhead</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>Godot Version</th>
      <th>Addon Version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4.0.x</td>
      <td>1.0.x</td>
    </tr>
    <tr>
      <td>4.1.x</td>
      <td>1.1.x</td>
    </tr>
  </tbody>
</table>

<p>You could maintain a separate <code class="language-plaintext highlighter-rouge">1.0</code> branch for Godot 4.0.x compatibility, cherry-picking bug fixes as needed. This approach increases administrative overhead, especially if you’re using Continuous Integration.</p>

<h3 id="option-2-drop-support-for-godot-40">Option 2: Drop Support for Godot 4.0</h3>

<blockquote>
  <p>✅ Access to all new features<br />
⛔️ Risk of alienating some users</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>Godot Version</th>
      <th>Addon Version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4.1.x</td>
      <td>1.1.x</td>
    </tr>
  </tbody>
</table>

<p>By dropping support for older versions, you can fully utilize the new features but may lose users who are still on Godot 4.0.x.</p>

<h3 id="option-3-maintain-broad-compatibility">Option 3: Maintain Broad Compatibility</h3>

<blockquote>
  <p>✅ Broad user base<br />
⛔️ Limited access to new features</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>Godot Version</th>
      <th>Addon Version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4.x</td>
      <td>1.x</td>
    </tr>
  </tbody>
</table>

<p>This approach minimizes administrative work but restricts you from using newer features.</p>

<h2 id="which-option-to-pick">Which Option to Pick?</h2>

<p>The best approach depends on various factors:</p>

<ul>
  <li><strong>User Base</strong>: Check <a href="https://godotengine.github.io/issue-stats/">issue stats</a> to gauge the popularity of different Godot versions.</li>
  <li><strong>Feature Importance</strong>: Assess how critical new Godot features are for your addon’s functionality.</li>
  <li><strong>Administrative Overhead</strong>: Be realistic about the time and effort you can invest in maintaining multiple branches.</li>
  <li><strong>Backporting</strong>: Consider whether a feature could be backported to older versions, especially if it’s a game-changer.</li>
</ul>

<h2 id="supporting-godot-3x">Supporting Godot 3.x</h2>

<p>If you wish to support both Godot 3 and 4, you can maintain separate branches for each. For example, my addon <a href="https://bitbra.in/beehave/#/?id=%f0%9f%93%a6-installation">beehave</a> has two branches: <strong>godot-4.x</strong> and <strong>godot-3.x</strong>, each tailored to its respective Godot version.</p>]]></content><author><name>bitbrain</name></author><category term="godot" /><category term="addon" /><category term="gamedev" /><summary type="html"><![CDATA[Godot addons offer a powerful way to extend the engine’s functionality without having to modify its core. This flexibility empowers the community to create custom solutions without burdening the engine itself. However, as addon developers, we must strike a balance between compatibility and functionality. This article explores the trade-offs involved, focusing primarily on Godot Engine 4.x.]]></summary></entry><entry><title type="html">Workflow of releasing a gem-based Jekyll theme</title><link href="https://bitbrain.github.io/2021/10/05/workflow-of-releasing-gem-based-jekyll-theme.html" rel="alternate" type="text/html" title="Workflow of releasing a gem-based Jekyll theme" /><published>2021-10-05T00:00:00+00:00</published><updated>2021-10-05T00:00:00+00:00</updated><id>https://bitbrain.github.io/2021/10/05/workflow-of-releasing-gem-based-jekyll-theme</id><content type="html" xml:base="https://bitbrain.github.io/2021/10/05/workflow-of-releasing-gem-based-jekyll-theme.html"><![CDATA[<p>This <a href="https://jekyllrb.com/">Jekyll</a>-based blog has been built with a custom theme created called <a href="https://github.com/bitbrain/jekyll-dash">jekyll-dash</a>. Initially, I built this theme just to share it with others, however, more and more people started using it over the past few months.</p>

<p><a href="https://github.com/bitbrain/jekyll-dash"><img src="/public/media/jekyll-dash-logo.png" alt="jekyll-dash-logo" /></a></p>

<p>In this article I want to highlight some of the challenges I faced trying to maintain this theme for a lot of people and the workflow I introduced that helped me to overcome these challenges.</p>

<h1 id="an-auto-update-theme">An “auto-update” theme</h1>

<p>When I first started this theme I found it quite annoying that I constantly had to manually update my Jekyll files such as layouts, Sass and pages to apply a change to my blog. Especially, when trying to keep the theme in its <a href="https://github.com/bitbrain/jekyll-dash">own dedicated repository</a> this can become a demanding chore.</p>

<p>The solution to this was to bundle my theme as a so called <a href="https://rubygems.org/">Ruby gem</a> and then use that gem within the <code class="language-plaintext highlighter-rouge">_config.yml</code> of Jekyll:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span> <span class="s">jekyll-dash</span>
</code></pre></div></div>
<p>Jekyll will automatically apply the theme if it is specified as a gem within <code class="language-plaintext highlighter-rouge">Gemfile</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'jekyll-dash'
</code></pre></div></div>
<p>Whenever I push a new version of the gem to the public rubygems repository, rebuilding my site would use the new changes and automatically include them - neat!</p>

<h1 id="limitations-of-github-pages">Limitations of Github Pages</h1>

<p>Unfortunately, I quickly had to realise that a lot of people were unable to use my theme natively within Github pages. Github are actually the creators behind Jekyll and when you create a repository containing Jekyll files, it will automatically build them for you and publish them <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site">when the Github pages feature is enabled</a>.</p>

<p>There was just one problem: <a href="https://pages.github.com/versions/">Github pages did not support Jekyll 4.x</a> at the moment of this writing but only Jekyll 3.x. This becomes a problem because my theme was natively built with Jekyll 4.</p>

<p>Therefore, I had to introduce a multi-version workflow:</p>

<ul>
  <li>version <code class="language-plaintext highlighter-rouge">1.x</code> will support Jekyll 3</li>
  <li>version <code class="language-plaintext highlighter-rouge">2.x</code> will support Jekyll 4</li>
</ul>

<p>I created separate branches for those and specified the Jekyll version explicitly within the <code class="language-plaintext highlighter-rouge">.gemspec</code> file of <a href="https://github.com/bitbrain/jekyll-dash/blob/main/jekyll-dash.gemspec">jekyll-dash</a>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spec.add_runtime_dependency "jekyll", "~&gt; 4.0"
</code></pre></div></div>
<p>This worked very well for my usecase and I was able to use the theme natively in Github pages.</p>

<p>For what reason would I want to use Jekyll outside of the native Github pages integration then? Well, due to security reasons, Github Pages does only allow a very specific set of Jekyll plugins to be enabled. This restricts customisation of the site. For example, I also needed the following features:</p>

<ul>
  <li>gravatar support</li>
  <li>auto-generated tags and tag cloud</li>
</ul>

<p>The solution was to build the site externally outside of Github Pages but then push the generated site <a href="https://github.com/bitbrain/bitbrain.github.io">onto a Github Pages enabled repository</a>. I achieved that by using <a href="https://travis-ci.org/">travis-ci.org</a> which became eventually difficult to manage. As a result, I left Travis behind and moved over to <a href="https://docs.github.com/en/actions">Github Actions</a>.</p>

<h1 id="improving-the-workflow">Improving the workflow</h1>

<p>My initial release workflow looked as follows:</p>

<ol>
  <li>push a new commit to the <code class="language-plaintext highlighter-rouge">main</code> branch containing the updated version within the <code class="language-plaintext highlighter-rouge">.gemspec</code></li>
  <li>push a new tag for the given commit</li>
  <li>release the gem (see script below)</li>
</ol>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">before_install</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s">gem install bundler -v 2.0.1</span>
<span class="na">script</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s">bundle install</span>
<span class="na">deploy</span><span class="pi">:</span>
  <span class="na">provider</span><span class="pi">:</span> <span class="s">rubygems</span>
  <span class="na">api_key</span><span class="pi">:</span> <span class="s">$RUBYGEMS_API_KEY</span>
  <span class="na">gem</span><span class="pi">:</span> <span class="s">jekyll-dash</span>
  <span class="na">on</span><span class="pi">:</span>
    <span class="na">tags</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">repo</span><span class="pi">:</span> <span class="s">bitbrain/jekyll-dash</span>
</code></pre></div></div>
<p>There were a couple of issues with this approach:</p>

<ul>
  <li>the pipeline ran outside of Github while Github support Github Actions out-of-the-box</li>
  <li>unable to see what each release entails, as Github releases and git tags were not created for a new release</li>
  <li>difficult to manage multiple major versions, as this pipeline would always deploy what the tag said. I had to be very careful to not cause unecessary merge conflicts</li>
  <li>individual commits were not really built and tested. Especially for people trying to make contributions it was difficult to tell if their change would break the Jekyll build</li>
</ul>

<p>I discarded this workflow and introduced a completely new one built from scratch based on <strong>Github Actions</strong>:</p>

<ol>
  <li>Build jekyll site for each individual commit and report on its status code</li>
  <li>When committing to the branches <code class="language-plaintext highlighter-rouge">main</code> (v2.x) and <code class="language-plaintext highlighter-rouge">1.x</code> (v1.x) respectively, do the following:
    <ul>
      <li>extract the current gem version from the .gemspec file <a href="https://github.com/bitbrain/gemspec-fetch">with a custom-built Github action</a></li>
      <li>check git history if a tag for the extracted gem version exists already</li>
      <li>in case the tag does not exist yet, create a new git tag and push a new Github release</li>
    </ul>
  </li>
  <li>Whenever a new tag has been pushed, build and publish the gem for that tag to rubygems.org</li>
</ol>

<p><img src="/public/media/jekyll-dash-build-tag.jpg" alt="jekyll-dash-build" /></p>

<p>In order to check that the gem version exists as a tag, I am using the <code class="language-plaintext highlighter-rouge">github-tag-action</code>:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">💎 Extract gemspec info</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">gemspec_fetch</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">bitbrain/gemspec-fetch@1.0.0</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">specfile</span><span class="pi">:</span> <span class="s">jekyll-dash.gemspec</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">🕵️‍♂️ investigate if tag exists</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">mukunku/tag-exists-action@v1.0.0</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">tag-check</span>
  <span class="na">with</span><span class="pi">:</span> 
    <span class="na">tag</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v${{</span><span class="nv"> </span><span class="s">steps.gemspec_fetch.outputs.version</span><span class="nv"> </span><span class="s">}}'</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GH_CREDENTIALS }}</span>
</code></pre></div></div>
<p>This allows me then to apply an <code class="language-plaintext highlighter-rouge">if</code> conditional on any other steps:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">🔖Build tag</span>
  <span class="na">if</span><span class="pi">:</span> <span class="s">${{ steps.tag-check.outputs.exists == 'false' }}</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">tag_version</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">mathieudutour/github-tag-action@v5.6</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">github_token</span><span class="pi">:</span> <span class="s">${{ secrets.GH_CREDENTIALS }}</span>
    <span class="na">default_bump</span><span class="pi">:</span> <span class="kc">false</span>
    <span class="na">custom_tag</span><span class="pi">:</span>  <span class="s">${{ steps.gemspec_fetch.outputs.version }}</span>
    <span class="na">tag_prefix</span><span class="pi">:</span> <span class="s">v</span>
</code></pre></div></div>
<p>The slightly tricky part was to extract the version from the .gemspec file. For that I build <a href="https://github.com/bitbrain/gemspec-fetch">my own Github Action</a> that is using <a href="https://github.com/packsaddle/ruby-parse_gemspec-cli">parse-gemspec-cli</a> to <a href="https://github.com/bitbrain/gemspec-fetch/blob/main/entrypoint.sh">extract the metadata accordingly</a>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">SPEC_DATA</span><span class="o">=</span><span class="si">$(</span>parse-gemspec-cli <span class="nv">$INPUT_SPECFILE</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"::set-output name=name::</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$SPEC_DATA</span> | jq <span class="nt">-r</span> <span class="s1">'.name'</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"::set-output name=description::</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$SPEC_DATA</span> | jq <span class="nt">-r</span> <span class="s1">'.description'</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"::set-output name=summary::</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$SPEC_DATA</span> | jq <span class="nt">-r</span> <span class="s1">'.summary'</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"::set-output name=version::</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$SPEC_DATA</span> | jq <span class="nt">-r</span> <span class="s1">'.version'</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"::set-output name=homepage::</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$SPEC_DATA</span> | jq <span class="nt">-r</span> <span class="s1">'.homepage'</span><span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>
<p>This new workflow allows me to build and test every single commit and it gives me full control of when I want to release a new gem: I simply bump the version of the gem manually within the .gemspec and Github will do the rest for me!</p>]]></content><author><name>bitbrain</name></author><category term="github" /><category term="ruby" /><category term="jekyll" /><category term="automation" /><summary type="html"><![CDATA[This Jekyll-based blog has been built with a custom theme created called jekyll-dash. Initially, I built this theme just to share it with others, however, more and more people started using it over the past few months.]]></summary></entry><entry><title type="html">Host your own blog with Jekyll and Github Pages</title><link href="https://bitbrain.github.io/2021/10/03/host-your-own-blog-for-free-with-custom-domain.html" rel="alternate" type="text/html" title="Host your own blog with Jekyll and Github Pages" /><published>2021-10-03T00:00:00+00:00</published><updated>2021-10-03T00:00:00+00:00</updated><id>https://bitbrain.github.io/2021/10/03/host-your-own-blog-for-free-with-custom-domain</id><content type="html" xml:base="https://bitbrain.github.io/2021/10/03/host-your-own-blog-for-free-with-custom-domain.html"><![CDATA[<p>Github allows you to host your own websites via <a href="https://pages.github.com/">Github Pages</a>. With a tool called <a href="https://jekyllrb.com/">Jekyll</a> you are able to create pages for your website written in <a href="https://www.markdownguide.org/basic-syntax/">Markdown</a>. Let us explore how we can set up our own blog hosted on Github Pages. Additionally, let us configure a custom domain for our website! This very blog is hosted exactly that way!</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>make sure that <a href="https://jekyllrb.com/docs/installation/">Jekyll is installed</a></li>
  <li>make sure that <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">git is installed</a></li>
  <li>make sure that you <a href="https://github.com/join">have a Github account</a></li>
</ul>

<h2 id="1-repository-setup">1. Repository setup</h2>

<p>Create a new repository in Github that follows the following naming convention and initialise it with a <code class="language-plaintext highlighter-rouge">main</code> branch:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;your-username&gt;.github.io
</code></pre></div></div>
<p>This repository will host both our source files (Jekyll) and will also contain a branch that contains the generated files for Github pages. Once checked out locally, let us create a custom orphan branch like this:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">--orphan</span> gh-pages <span class="se">\</span>
<span class="o">&amp;&amp;</span> git commit <span class="nt">--allow-empty</span> <span class="nt">-m</span> <span class="s2">"initial commit"</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> git push <span class="nt">-u</span> origin gh-pages <span class="se">\</span>
<span class="o">&amp;&amp;</span> git checkout main
</code></pre></div></div>
<p>Then head into <code class="language-plaintext highlighter-rouge">Settings-&gt;Pages</code> of your repository in Github and set your source branch of Github pages:</p>

<p><img src="/public/media/set-source-branch.jpg" alt="set-source-branch" /></p>

<p>This will ensure that Github looks up any content on that branch and serves it automatically at the following url:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://&lt;your-username&gt;.github.io
</code></pre></div></div>
<h2 id="2-jekyll-setup">2. Jekyll setup</h2>

<p>Next up, let us configure Jekyll on the <code class="language-plaintext highlighter-rouge">main</code> branch. Keep in mind that <code class="language-plaintext highlighter-rouge">main</code> has a different git history to <code class="language-plaintext highlighter-rouge">gh-pages</code>. We will not directly commit anything to <code class="language-plaintext highlighter-rouge">gh-pages</code> - instead, we host all the Jekyll files on the <code class="language-plaintext highlighter-rouge">main</code> branch only and let the Github Action do the rest!</p>

<p>Let us configure Jekyll by generating a new site:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new <span class="nt">--skip-bundle</span> <span class="nb">.</span>
</code></pre></div></div>
<p>(optional) build and test the Jekyll site locally:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install &amp;&amp; jekyll serve
</code></pre></div></div>
<p>and then head over to <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000</a> to view your page locally:</p>

<p><img src="/public/media/jekyll-default-page.jpg" alt="jekyll-default-page" /></p>

<p>push your Jekyll site to Github:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add -A \
&amp;&amp; git commit -am "setup Jekyll blog" \
&amp;&amp; git push origin main
</code></pre></div></div>
<h2 id="3-github-action">3. Github Action</h2>

<p>The Jekyll source files are sitting now on the <code class="language-plaintext highlighter-rouge">main</code> branch but we want to automatically build our website like we used to do earlier locally. For this we will use a Github action. This action will build our website and then force-push it to the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch.</p>

<p>Create a new file under the folder <code class="language-plaintext highlighter-rouge">.github/workflows/github-pages.yml</code>. Github will look for any files hosted in the <code class="language-plaintext highlighter-rouge">.github/workflows</code> folder and run a so called action. Within that file, define the following:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Build and deploy Jekyll site to GitHub Pages</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">github-pages</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">helaili/jekyll-action@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">target_branch</span><span class="pi">:</span> <span class="s">gh-pages</span>
</code></pre></div></div>
<p>This action will automatically take care of building your Jekyll page and pushing it to the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch. Before this works we need to define a custom github token, as the default <code class="language-plaintext highlighter-rouge">GH_TOKEN</code> will not work within actions.</p>

<p><img src="/public/media/generate-new-token.jpg" alt="generate-new-token" /></p>

<p>Make sure to set this token to never expire and assign the following permissions:</p>

<ul>
  <li>repo</li>
  <li>workflow</li>
  <li>write:packages (optional)</li>
  <li>delete:packages (optional)</li>
</ul>

<blockquote>
  <p><strong>ATTENTION!</strong> NEVER reveal any of your tokens or hardcode them into your code. Hackers will use them to compromise your account!</p>
</blockquote>

<p>Copy the token that is shown and define a new secret within your repository called <code class="language-plaintext highlighter-rouge">CUSTOM_GITHUB_TOKEN</code>:</p>

<p><img src="/public/media/custom-github-token.jpg" alt="custom-github-token" /></p>

<p>Next, push your changes to your repository:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nt">-A</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> git commit <span class="nt">-m</span> <span class="s2">"Setup workflow"</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> git push origin main
</code></pre></div></div>
<p>Within your repository on Github you should now seen a new action getting triggered:</p>

<p><img src="/public/media/successful-workflow.jpg" alt="github-action" /></p>

<h2 id="4-optional-setup-custom-domain">4. (optional) Setup custom domain</h2>

<p>Having a long url such as https://bitbrain.github.io works but does not look very good on your CV. You can setup a custom domain like I have: https://bitbra.in this page is hosted on Github Pages but has a custom domain setup.</p>

<p>Create a new file called <code class="language-plaintext highlighter-rouge">CNAME</code> that contains your domain, for example:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bitbra.in
</code></pre></div></div>
<p>and commit and push that file. Now, head to <code class="language-plaintext highlighter-rouge">Settings-&gt;Pages</code> to setup your domain:</p>

<p><img src="/public/media/custom-domain-setup.jpg" alt="custom-domain" /></p>

<p>This will only work if you own the domain and you configured your CNAME entry correctly within your domain provider. <a href="https://medium.com/@benwiz/how-to-deploy-github-pages-with-aws-route-53-registered-custom-domain-and-force-https-bbea801e5ea3">Follow this guide</a> to learn how to set up your custom domain within AWS.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Let me know in the comments if you face any issues so I can keep this guide up-to-date! If you want to use <strong>the custom Jekyll theme of this blog</strong>, <a href="https://github.com/bitbrain/jekyll-dash#installation">feel free to checkout this guide</a>!</p>]]></content><author><name>bitbrain</name></author><category term="tutorial" /><category term="github" /><category term="ruby" /><category term="jekyll" /><summary type="html"><![CDATA[Github allows you to host your own websites via Github Pages. With a tool called Jekyll you are able to create pages for your website written in Markdown. Let us explore how we can set up our own blog hosted on Github Pages. Additionally, let us configure a custom domain for our website! This very blog is hosted exactly that way!]]></summary></entry><entry><title type="html">Becoming a gamedev Youtuber</title><link href="https://bitbrain.github.io/2020/12/29/devlog-youtubers.html" rel="alternate" type="text/html" title="Becoming a gamedev Youtuber" /><published>2020-12-29T00:00:00+00:00</published><updated>2020-12-29T00:00:00+00:00</updated><id>https://bitbrain.github.io/2020/12/29/devlog-youtubers</id><content type="html" xml:base="https://bitbrain.github.io/2020/12/29/devlog-youtubers.html"><![CDATA[<p>For many years, I remained quiet and built <a href="https://bitbrain.itch.io">a lot of little games</a> just for fun. I may have shared progress on them <a href="https://twitter.com/bitbrain_">on Twitter</a> but that’s it. To be completely honest, I was afraid people might not like what I am doing or that my work <em>is not good enough</em> for the world to see.</p>

<p>Finally, after years of hiding, I decided this year <a href="https://www.youtube.com/bitbraindev">to become a Youtuber</a>! Before I go into details, let me first talk a little bit about Youtube a bit, especially the game development section.</p>

<h1 id="the-four-types-of-gamedev-content">The four types of gamedev content</h1>

<p>Before I became a creator, I used to only watch devlogs myself. I am probably subscribed to over 80 different creators and each of them has their unique strengths. Generally, they can be categorised as follows:</p>

<h2 id="type-a-the-informative-game-developer">Type A: The informative Game Developer</h2>

<p>This type focuses purely on sharing knowledge and learnings without wasting anyones time. Entertainment-first is not a priority but rather showing progress. A very good example of this is <a href="https://www.youtube.com/c/Miziziziz">Miziziziz</a> - he is the master of efficiency when it comes to condensing information within a single video. What also makes him great is that Miziziziz is very knowledgable in the stuff he’s doing!</p>

<p><img src="/public/media/mizizizi.png" alt="type-a" /></p>

<h2 id="type-b-the-relaxed-game-developer">Type B: The relaxed Game Developer</h2>

<p>Sometimes, after a hectic day, you just want to relax and not worry about consuming information as quickly as possible. Rather, you’d like to watch someone explaining thoroughly their process and how to live a healthy, productive life. One of my favourite Youtubers, <a href="https://www.youtube.com/c/DevDuck/videos">devduck</a>, is a prime-example of this. His editing style is always very relaxed but also kinda melancholic. Watching his videos really motivated me to get up early in the morning (we’re talking like 5am) to enjoy game development in its fullest.</p>

<p><img src="/public/media/devduck1.png" alt="type-b" /></p>

<h2 id="type-c-the-entertainer">Type C: The Entertainer</h2>

<p>You find most devlogs dry and boring and always skip most of it? You prefer watching Twitch streamers for their personality? You like banter and swear just for fun? Then <a href="https://www.youtube.com/randallthomas">Randy</a> is your guy! One of my favourite videos is <a href="https://www.youtube.com/watch?v=lahpnRVxkU8">Simulating every single pixel in my game</a>. In that particular episode, Randy shows off various alter-ego characters, each having a particular responsibility. In addition, his Australian accent makes the videos highly enjoyable (if you like that kind of humour).</p>

<p><img src="/public/media/randy.png" alt="type-c" /></p>

<h2 id="type-d-the-newcomer">Type D: The Newcomer</h2>

<p>Sometimes it surprises me to see brilliant videos but the creators have less than 1000 subscribers. It amazes me how many awesome creators are out there, and almost nobody watched their videos yet. A few of these newcomers are (in my opinion) on-par with the “big ones” such as <strong>devduck</strong> or <strong>heartbeast</strong>. What makes these creators so unique is their personality, the editing style and the type of content they create. For example <a href="https://www.youtube.com/channel/UCHwsuay541hn0rj-Bqvm3WA/videos">Obvious Dev</a> is an aspiring game developer from Germany, working on his game called <strong>Exo Colony</strong>. Like me, he is quite German and we have a severe lack of German game developers on Youtube. Let’s unite!</p>

<p><img src="/public/media/obviousdev.png" alt="type-d" /></p>

<p>Another great Youtuber is <a href="https://www.youtube.com/channel/UCiTOqFuPAIweN5dy7y-xJuQ/videos">Element Mill</a>. I discovered him by accident and <a href="https://www.youtube.com/watch?v=oU3hwuV3wyM">his production value is comparable</a> to a creator with a few million subscribers. Insanity!</p>

<h1 id="my-youtube-channel">My Youtube channel</h1>

<p>After I got inspired by all those awesome creators, I decided for myself to join the bunch and become a Youtuber myself. I wanted to produce devlogs, document my workflows and show my struggles and achievements. I bought myself a <a href="https://www.canon.co.uk/cameras/eos-m50/">CANON M50</a> and a <a href="https://www.bluemic.com/en-us/products/yeti/">Blue Yeti Microphone</a> and started filming my first video.</p>

<p>Suddenly I realised: what kind of style do I actually aim for? I really don’t find myself funny, so probably trying to push for Funny/Entertainer content might be not ideal. Then I thought: <strong>Why even trying to fit into a box? Just do whatever!</strong> which is initially very difficult. So, I went ahead and created my first two videos:</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=Sonkr6vf4Eo">I build my first crafting game in Godot Engine!</a></li>
  <li><a href="https://www.youtube.com/watch?v=XUwLMpPMOL4">Lighting and inventory update for my Godot crafting game!</a></li>
</ul>

<p>I have received dozens of comments and a lot of feedback. While creating these videos, I tried not to copy any of the previouslu mentioned Youtubers but simply did what I found interesting/fun to do. In handsight, I accidentally tried to copy some things from other Youtubers by filling my videos with so called B-Roll (the content between the content). In my last video, I might have even overdone this and lost focus on what I actually wanna do: show insights into my gamedev process.</p>

<p><img src="/public/media/bitbrainyt.png" alt="bitbrain" /></p>

<h1 id="expectations-vs-reality">Expectations vs. Reality</h1>

<p>Before I created my first video, I thought it would be rather easy to produce content. When editing for many hours just to create a few minutes of content, I had to learn that it is <strong>very exhausting and challenging</strong> to do this kind of <strong>work</strong>. Another learning was that it can be rather tempting to produce content <strong>for the clicks</strong> rather than just focusing on the content itself. Regardless, I would have never expected to get that many followers in just a few months. Over 300 people have subscribed to my channel already and over 4000 views have accumulated! Thank you for everyone joining my gamedev journey.</p>

<h1 id="the-future">The future</h1>

<p>In 2021, I have big plans for my Youtube channel. Obviously, I will continue my devlog series on <a href="https://bitbrain.itch.io/cave">cave</a> but also I have plans to do different types of content such as interviews, collaborations and tutorials!</p>

<p>Stay tuned. ♥</p>]]></content><author><name>bitbrain</name></author><category term="devlog" /><category term="godot" /><category term="gamedev" /><category term="youtube" /><summary type="html"><![CDATA[For many years, I remained quiet and built a lot of little games just for fun. I may have shared progress on them on Twitter but that’s it. To be completely honest, I was afraid people might not like what I am doing or that my work is not good enough for the world to see.]]></summary></entry><entry><title type="html">How to publish your Godot Game to itch.io via Github actions</title><link href="https://bitbrain.github.io/2020/08/01/publish-godot-game-to-itchio.html" rel="alternate" type="text/html" title="How to publish your Godot Game to itch.io via Github actions" /><published>2020-08-01T00:00:00+00:00</published><updated>2020-08-01T00:00:00+00:00</updated><id>https://bitbrain.github.io/2020/08/01/publish-godot-game-to-itchio</id><content type="html" xml:base="https://bitbrain.github.io/2020/08/01/publish-godot-game-to-itchio.html"><![CDATA[<p>Manually building and uploading your <a href="https://godotengine.org">Godot</a> games can be painful and time-consuming. In this tutorial am going to show you how to automate the process:</p>

<ol>
  <li>let Github build your game via <a href="https://github.com/actions">Github Actions</a></li>
  <li>Github creates a new release</li>
  <li>publish automatically to <a href="https://itch.io">itch.io</a></li>
</ol>

<h1 id="prequisites">Prequisites</h1>

<ul>
  <li>Github account</li>
  <li>itch.io account</li>
  <li>published game page on itch.io</li>
  <li>a Godot game project pushed to a Github repository</li>
</ul>

<h1 id="initial-setup">Initial setup</h1>

<h2 id="setting-up-itchio">Setting up itch.io</h2>

<p>In order to make this entire process work, we first have to setup a so called token in itch.io:</p>

<p><img src="/public/media/create-new-api-key.png" alt="api-key" /></p>

<h2 id="setup-secrets-in-github">Setup secrets in Github</h2>

<p>Next, we are going to set up the secrets within Github. Head over to <code class="language-plaintext highlighter-rouge">Account Settings -&gt; Developer settings -&gt; Personal access tokens</code> and generate a new token:</p>

<p><img src="/public/media/github-create-token.png" alt="gh-token" /></p>

<p>You will not be able to see this token again once generated! Save it somewhere locally in a file for later use.</p>

<blockquote>
  <p>ATTENTION! Never use keys/tokens within your code! Hackers can easily gain access to your account then. Instead, set up Github secrets that you can reference in your scripts.</p>
</blockquote>

<p>Next, head to your Github repository configuration page and add secrets:</p>

<p><img src="/public/media/github-create-secrets.png" alt="gh-secrets" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">BUTLER_CREDENTIALS</code> is the value of the itch.io key you previously generated</li>
  <li><code class="language-plaintext highlighter-rouge">GH_CREDENTIALS</code> is the value of your Github token you previously generated</li>
</ul>

<p>It is <strong>very</strong> important to use a custom <code class="language-plaintext highlighter-rouge">GH_CREDENTIALS</code> within Github actions. Due to a limitation, Github <a href="https://github.community/t/workflow-set-for-on-release-not-triggering-not-showing-up/16286/5">does not trigger any action</a> when the default <code class="language-plaintext highlighter-rouge">GITHUB_TOKEN</code> secret is being used to create releases:</p>

<blockquote>
  <p>Releases created when authenticating with the GITHUB_TOKEN will prevent new workflows from running.
If you want to run new workflows, you’ll need to set up a different PAT and add that as a secret.</p>

  <ul>
    <li>ethomson (Github Staff)</li>
  </ul>
</blockquote>

<h2 id="create-a-export_presetscfg-file">Create a export_presets.cfg file</h2>

<p>Within Godot, head over to <code class="language-plaintext highlighter-rouge">Project -&gt; Export...</code> and create a new export entry:</p>

<p><img src="/public/media/godot-export-project.png" alt="godot-export" /></p>

<p>Also, make sure to define an export path and give it a name (e.g. <strong>yourgame-windows</strong>). This will be the name of the game file in itch.io. Saving your configuration automatically generates a <code class="language-plaintext highlighter-rouge">export_presets.cfg</code> file that you need to commit to your Github repository. Make sure that your <code class="language-plaintext highlighter-rouge">.gitignore</code> does not accidentally exclude this file!</p>

<h1 id="create-github-actions">Create Github actions</h1>

<p>After you setup the secrets within your repository and pushed your export presets, it is now time to configure the Github actions.</p>

<p>Within the root of your repository, create a new <code class="language-plaintext highlighter-rouge">.github/workflows</code> directory that will contain all the actions (<code class="language-plaintext highlighter-rouge">*.yml</code> files).</p>

<h2 id="create-release-action">Create release action</h2>

<p>Create a new file under <code class="language-plaintext highlighter-rouge">.github/workflows/create-release.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">master</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">export_game</span><span class="pi">:</span>
    <span class="c1"># Always use ubuntu-latest for this action</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="c1"># Job name, can be anything</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Export game to Github</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="c1"># Always include the checkout step so that</span>
      <span class="c1"># your project is available for Godot to export</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">checkout</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2.3.1</span>
        <span class="c1"># Ensure that you get the entire project history</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">create game release</span>
        <span class="c1"># Use latest version (see releases for all versions)</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">firebelley/godot-export@v2.3.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="c1"># Defining all the required inputs</span>
          <span class="c1"># I used the mono version of Godot in this example</span>
          <span class="na">godot_executable_download_url</span><span class="pi">:</span> <span class="s">https://downloads.tuxfamily.org/godotengine/3.2.2/mono/Godot_v3.2.2-stable_mono_linux_headless_64.zip</span>
          <span class="na">godot_export_templates_download_url</span><span class="pi">:</span> <span class="s">https://downloads.tuxfamily.org/godotengine/3.2.2/mono/Godot_v3.2.2-stable_mono_export_templates.tpz</span>
          <span class="c1"># set this either to . or your game path, e.g. ./godot in case</span>
          <span class="c1"># your game is within a sub-directory</span>
          <span class="na">relative_project_path</span><span class="pi">:</span> <span class="s">.</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GH_CREDENTIALS }}</span>
          <span class="na">ACTIONS_ALLOW_UNSECURE_COMMANDS</span><span class="pi">:</span> <span class="s1">'</span><span class="s">true'</span>
</code></pre></div></div>
<p>Let’s have a look into the steps. First, we define when the action should get triggered. If you do not want to create a new release
everytime you push, replace the branch with a different branch, e.g. <code class="language-plaintext highlighter-rouge">release</code></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">master</span>
</code></pre></div></div>
<p>Afterwards, we use the <code class="language-plaintext highlighter-rouge">firebelley/godot-export</code> action to build our game. This one requires the <code class="language-plaintext highlighter-rouge">export_presets.cfg</code>  to be present in your <code class="language-plaintext highlighter-rouge">relative_project_path</code> specified in order to work. Also, it is important to set the environment variable so Github is able to push a new release for us:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GH_CREDENTIALS }}</span>
</code></pre></div></div>
<p>The versioning will be done automatically for you, however you can also provide additional configuration to the action to control the versioning yourself.</p>

<h2 id="publish-to-itchio-action">Publish to itch.io action</h2>

<p>The following example publishes to Windows only, however you can add additional platform releases as additional jobs. Create a new file under <code class="language-plaintext highlighter-rouge">.github/workflows/publish-to-itchio.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">on</span><span class="pi">:</span>
  <span class="na">release</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">published</span><span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">release_windows</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">download Windows</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">download-windows</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">dsaltares/fetch-gh-release-asset@master</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">file</span><span class="pi">:</span> <span class="s">yourgame-windows.zip</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s2">"</span><span class="s">${{</span><span class="nv"> </span><span class="s">secrets.GH_CREDENTIALS</span><span class="nv"> </span><span class="s">}}"</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">deploy to itch.io (Windows)</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">josephbmanley/butler-publish-itchio-action@master</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">BUTLER_CREDENTIALS</span><span class="pi">:</span> <span class="s">${{ secrets.BUTLER_CREDENTIALS }}</span>
          <span class="na">CHANNEL</span><span class="pi">:</span> <span class="s">windows</span>
          <span class="na">ITCH_GAME</span><span class="pi">:</span> <span class="s">yourgame</span>
          <span class="na">ITCH_USER</span><span class="pi">:</span> <span class="s">your itchio account</span>
          <span class="na">PACKAGE</span><span class="pi">:</span> <span class="s">yourgame-windows.zip</span>
          <span class="na">VERSION</span><span class="pi">:</span> <span class="s">${{ steps.download-windows.outputs.version }}</span>
</code></pre></div></div>

<p>Voila! Now commit and push everything and it should automatically create a release for you:</p>

<p><img src="/public/media/github-create-release.png" alt="github-release" /></p>

<p>After the release is created, Github will automatically trigger the next action to publish your game to itch.io:</p>

<p><img src="/public/media/github-export-to-itch.png" alt="github-itchio" /></p>]]></content><author><name>bitbrain</name></author><category term="godot" /><category term="github" /><category term="ci" /><category term="itchio" /><summary type="html"><![CDATA[Automatically build and deploy your Godot game to itch.io via Github actions.]]></summary></entry><entry><title type="html">Building a game from scratch in 48 hours</title><link href="https://bitbrain.github.io/2020/04/08/minibeansjam5-building-a-game.html" rel="alternate" type="text/html" title="Building a game from scratch in 48 hours" /><published>2020-04-08T00:00:00+00:00</published><updated>2020-04-08T00:00:00+00:00</updated><id>https://bitbrain.github.io/2020/04/08/minibeansjam5-building-a-game</id><content type="html" xml:base="https://bitbrain.github.io/2020/04/08/minibeansjam5-building-a-game.html"><![CDATA[<p><a href="https://itch.io/jam/minibeansjam5"><img src="/public/media/minibeansjam5.gif" alt="minibeansjam5" /></a></p>

<p>Between Friday 3rd-5th April 2020, German <a href="https://rocketbeans.tv/">Rocketbeans TV</a> hosted <a href="https://itch.io/jam/minibeansjam5">minibeansjam 5</a>, a 48 hour gamejam. I submitted a game and managed to finish most bits right in time.</p>

<p>The purpose is not to win anything, it’s more a fun thing to do and it challenges your skills in time management, setting priorities as well as health care. (yes, you <strong>NEED</strong> sleep!)</p>

<h1 id="preparation">Preparation</h1>

<p>Personally, I need to be in the right mood to approach something like a gamejam. I am a quite emotional developer and if I feel down or unwell, my creativity kinda stalls. That’s why I don’t <em>prepare</em> for gamejams in general. As a general rule though, please consider the following before approaching <strong>any</strong> gamejam:</p>

<ul>
  <li><strong>gamejams are there to have fun</strong>. Do not stress yourself! I know it can quite daunting at first, however, we’re all in the same boat. Enjoy it!</li>
  <li><strong>fix your sleep cycle!</strong> There is nothing worse than a broken sleep cycle. I know, people have their preferred time to stay awake (some people even like to work only during night). This is completely fine. However, make sure you keep it consistent, since otherwise you might oversleep on the last day and miss the deadline.</li>
  <li><strong>stay hydrated!</strong> prepare yourself with your favourite drink (sparkling water or still water is my favourite pick) - this keeps the brain cells active and moist!</li>
  <li><strong>Stay Away From Energy Drinks (SAFED)</strong></li>
  <li><strong>sharpen your tools</strong> on kick-off day, make sure you have everything already opened, preloaded etc. so you do not have to do it once the themes are announced.</li>
  <li><strong>Together is Better!</strong> find people who want to do it with you. I promise you it changes the entire experience.</li>
</ul>

<p>Interestingly, I purposefully did this game on my own. Initially, I was looking for a team but then I wanted to challenge myself: can I build a game including assets, programming, level design, game design, writing, sound design and music myself in such a short time?</p>

<p><img src="/public/media/challenge-accepted-meme.jpg" alt="challenge-accepted" /></p>

<h1 id="picking-a-theme">Picking a theme</h1>

<p>The theme has been announced around 6pm on Friday:</p>

<blockquote class="twitter-tweet" data-lang="en" data-theme="dark"><p lang="de" dir="ltr">Der <a href="https://twitter.com/hashtag/miniBeansjam5?src=hash&amp;ref_src=twsrc%5Etfw">#miniBeansjam5</a> Countdown hat begonnen!<br />Hier sind die Begriffe für das <a href="https://twitter.com/hashtag/GameJam?src=hash&amp;ref_src=twsrc%5Etfw">#GameJam</a> Thema!<br /><br />Wählt mindestens 2 der 3 Begriffe: Explosion, Elastisch und/oder Jenseits.<br /><br />Die Zeit endet am Sonntag um 19:00 Uhr, also in 48 Stunden!<br />Viel Spaß bei unserem <a href="https://twitter.com/hashtag/GameJam?src=hash&amp;ref_src=twsrc%5Etfw">#GameJam</a>!<a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://twitter.com/hashtag/rbtv?src=hash&amp;ref_src=twsrc%5Etfw">#rbtv</a> <a href="https://t.co/5Rnw3iR1OM">pic.twitter.com/5Rnw3iR1OM</a></p>&mdash; miniBeansjam (@minibeansjam) <a href="https://twitter.com/minibeansjam/status/1246120117433520131?ref_src=twsrc%5Etfw">April 3, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>For my all non-German friends, this basically says to pick one or more of the following themes:</p>

<ul>
  <li>Explosion</li>
  <li>Elastic</li>
  <li>Beyond</li>
</ul>

<p>The themes are not super strict but can be interpreted in any way. Their main purpose is to guide your imagination! The first thing I always do is creating <strong>a mindmap</strong>:</p>

<p><img src="/public/media/mindmap-minibeansjam5.jpg" alt="challenge-accepted" /></p>

<p>You can use whatever tool you prefer for this, after a quick Google search I found <a href="https://app.mindmapmaker.org/#m:new">mindmapmaker.org</a>.</p>

<p>I stared at my creation for a couple of minutes until I realised: I want to build a <strong>zombie shooter survival horror</strong>!</p>

<h1 id="setting-up-the-project">Setting up the project</h1>

<p>The next step for me is to set up a project. Many people also do offline games (like board games) where this obviously is not applicable.</p>

<h2 id="version-control">Version control</h2>

<p>A version control system (VSC) <a href="https://git-scm.com/">like git</a> helps you to track your changes over time. The idea is that every change you do to your project is stored in the cloud and can be accessed at any given time. For that, I use Github for that:</p>

<p><a href="https://github.com/bitbrain/shelter"><img src="/public/media/shelter-github-screenshot.jpg" alt="shelter-github" /></a></p>

<p>It is important to use a VSC since it can save you a lot of pain. Using something like Dropbox is very difficult once you want to play around with features but you do not have the concept of branches. Also, working with multiple people on the same file can be challenging with something like Dropbox. Version control becomes a <strong>MUST</strong> in bigger teams.</p>

<h2 id="generating-the-project-files">Generating the project files</h2>

<p>Next up I generate the project. I build all my games in Java, more specifically with frameworks like <a href="https://libgdx.badlogicgames.com/">libgdx</a> and <a href="https://github.com/bitbrain/braingdx">braingdx</a>. Then I commit the changes to Git and push them to my Github repository:</p>

<p><a href="https://github.com/bitbrain/shelter/commit/778eadaff2618b342a05dcd64813310c0f482f9c"><img src="/public/media/shelter-initial-commit.jpg" alt="shelter-initial-commit" /></a></p>

<p>Obviously, using when something like <a href="https://unity.com/">Unity Engine</a>, you’d push the project files of your Unity project.</p>

<h1 id="plan-your-time-wisely">Plan your time wisely</h1>

<p>This is the first critical stage. When I attended my first game jams a couple of years ago, I’d already rush ahead and implement <strong>features</strong> like health system, fighting, enemies or shooting. Those things are useful and make your game fun, however, now might not be the right time to do this. In my head, it looks a little bit like this:</p>

<p><img src="/public/media/48-gamejam-timeline.jpg" alt="48hour-timeline" /></p>

<p>I call this the <strong>Gamejam Flow Pyramid</strong> (excuse my poor MSPaint skills. Also, arrows are now up to scale). The idea is the following:</p>

<ul>
  <li><strong>Day 1</strong>: working out the core mechanic of your game. After the first day, your game is basically already playable, but most likely is 0 fun since reward systems, UI, assets, etc. are missing. However, <strong>mechanically</strong> the foundation for your game is set.</li>
  <li><strong>Day 2</strong>: Powermode! It’s time to implement all your features, assets and build a basic (functional) UI. At the end of the day, mostly only polishing and nice-to-have features should be left. Also, do not worry about the game loop or menu flow, that’s all for the last day.</li>
  <li><strong>Day 3</strong>: Wrapping it up. Time to finish the game loop, build menu flows (logo screen -&gt; main menu -&gt; ingame -&gt; game over, etc.) . Also try to polish your game as much as possible: add particle effects, screen shake, more animations, etc. and add features you think will make the game more fun.</li>
</ul>

<p>Obviously, this order is just a suggestion and always works for me the best. Also, for multi-disciplinary teams this order can be moved around or things like assets and levels can be prepared already on Day 1 while developers work on implementing game mechanics. On Day 2 and Day 3, artists, writers and composers can then work on polishing existing stuff or extend the game.</p>

<h1 id="day-1-the-dancing-man">Day 1: the dancing man</h1>

<p>After setting up my project, I opened my <a href="https://pyxeledit.com">Pyxel Edit</a> to create a simple tileset:</p>

<p><img src="/public/media/shelter-tileset.jpg" alt="shelter-tileset" /></p>

<p>I added a lot of variation to different grass tiles so the game looks okay when walking over a plain of grass. If you haven’t seen tile sets like this yet: <a href="https://doc.mapeditor.org/en/stable/manual/using-the-terrain-tool/">Tiled map editor has Terrain support</a> and it makes things so much more easier to build nice-looking maps with the terrain editor:</p>

<p><img src="/public/media/shelter-terrain-editor.jpg" alt="shelter-terrain-editor" /></p>

<p>Once the terrain has been defined, you can simply draw terrain within tiled:</p>

<p><img src="/public/media/shelter-terrain-example.jpg" alt="shelter-terrain-example" /></p>

<p>That’s all I needed for level design right now. Time to work on my core mechanic: the walking soldier. To achieve that, I wanted to do a 2.5-dimensional illusion where you can perceive depth:</p>

<p><img src="/public/media/2.5d-example.jpg" alt="2.5d-example" /></p>

<p>Next up I created the player tileset. In previous games I always used to have WASD movement and four directions. However, that can be very limiting and I wanted the player to move in ANY direction. That’s why the tileset needs to take diagonal movement into account:</p>

<p><img src="/public/media/shelter-player-tileset.jpg" alt="shelter-player-tileset" /></p>

<p>Implementing this into the game <a href="https://github.com/bitbrain/braingdx/wiki/animations">with the animation system of my framework braingdx</a> was straight-forward. Here is the result:</p>

<blockquote class="twitter-tweet" data-theme="dark"><p lang="en" dir="ltr">Implemented movement 🏃‍♀️ and rotation 💃<br /><br />Next up: running animation and weapon system.<a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://twitter.com/minibeansjam?ref_src=twsrc%5Etfw">@minibeansjam</a> <a href="https://t.co/tZO43xUzBu">pic.twitter.com/tZO43xUzBu</a></p>&mdash; 〽️ɪɢᴜᴇʟ (@bitbrain_) <a href="https://twitter.com/bitbrain_/status/1246172775494176768?ref_src=twsrc%5Etfw">April 3, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Enough for the first day. Time to go to bed! 😴💤</p>

<h1 id="day-2-zombie-apocalypse">Day 2: zombie apocalypse</h1>

<p>The second day was about building out the core mechanics such as implementing shooting and zombies:</p>

<blockquote class="twitter-tweet" data-theme="dark"><p lang="en" dir="ltr">Implemented <a href="https://twitter.com/hashtag/box2d?src=hash&amp;ref_src=twsrc%5Etfw">#box2d</a> physics and shadows. Now I can bump into zombies.<br /><br />Now working on the first weapon, shooting &amp; running animations. <a href="https://t.co/MKmT2fP4IH">pic.twitter.com/MKmT2fP4IH</a></p>&mdash; 〽️ɪɢᴜᴇʟ (@bitbrain_) <a href="https://twitter.com/bitbrain_/status/1246417958055837701?ref_src=twsrc%5Etfw">April 4, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Making zombies was rather easy: I desaturated the colours of the player texture, painted the skin green and made the eyes red:</p>

<p><img src="/public/media/shelter-zombie-tileset.jpg" alt="shelter-player-tileset" /></p>

<p>Yes, this means zombies have the same animation as the player, but nobody hopefully notices this! <em>flies away</em></p>

<blockquote class="twitter-tweet" data-theme="dark"><p lang="en" dir="ltr">Shooting in action.<br /><br />Next up: making zombies aggressive and more animations.<a href="https://twitter.com/hashtag/minibeansjam5?src=hash&amp;ref_src=twsrc%5Etfw">#minibeansjam5</a> <a href="https://twitter.com/minibeansjam?ref_src=twsrc%5Etfw">@minibeansjam</a> <a href="https://t.co/TicPbc33EI">pic.twitter.com/TicPbc33EI</a></p>&mdash; 〽️ɪɢᴜᴇʟ (@bitbrain_) <a href="https://twitter.com/bitbrain_/status/1246500096042205185?ref_src=twsrc%5Etfw">April 4, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>After implementing shooting zombies and a health system, it was time to do something entirely different: composing a soundtrack. Since I wanted to save time and I was all on my own, I had to do a few design decisions before composing:</p>

<ul>
  <li>the track should be repeatable without noticing and should not become boring</li>
  <li>the track should be rather ambient based</li>
  <li>the game is action-based but I wanted to keep it horror, so it should not have any percussion work</li>
</ul>

<p>I spun up my Ableton and came up with this:</p>

<iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/791093143&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"></iframe>

<p>I added tons of base and reverb to give a sense of loneliness. Also notice those weird tones towards the end? That’s me just randomly punching my MIDI keyboard.</p>

<h1 id="day-3-taking-shelter">Day 3: taking shelter</h1>

<p>On the last day I recorded various sound effects myself:</p>

<ul>
  <li><strong>zombie sounds</strong> by moaning into the microphone and pitching it</li>
  <li><strong>footstep sounds</strong> by shaking my leather jacket</li>
  <li><strong>shot impact sounds</strong> by squishing a wet towel</li>
  <li><strong>door sounds</strong> by opening and closing one of our old doors and adding reverb</li>
</ul>

<p>Also, there are more sound effects I downloaded from the internet since it was rather difficult to record them myself:</p>

<ul>
  <li>death sound</li>
  <li>explosion sound</li>
  <li>reload sound</li>
  <li>weapon shoot sound</li>
</ul>

<h1 id="last-words">Last words</h1>

<p>That’s how I built the game. Obviously, there was much more stuff done on the code front. Checkout this video to see all the code I wrote during this project:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dbCTbEMASB8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>I just want to thank the other participants <a href="https://itch.io/jam/minibeansjam5/entries">for their amazing games</a> (I played them all!) and also give special thanks to <a href="https://rocketbeans.tv/bohnen/65/Dmitrij">Dima (Dmitrij Chotin)</a> for organising this great event. Hey, <a href="https://twitter.com/retrodima">follow him on Twitter</a>! He built an amazing game, too.</p>

<p>Oh! I almost forgot! You can play the game here:</p>

<iframe src="https://itch.io/embed/603286?border_width=0&amp;dark=true" width="550" height="165" frameborder="0"><a href="https://bitbrain.itch.io/shelter">shelter by bitbrain</a></iframe>]]></content><author><name>bitbrain</name></author><category term="minibeansjam" /><category term="libgdx" /><category term="gamedev" /><category term="pixelart" /><summary type="html"><![CDATA[I built a game in 48 hours from scratch. Let me show you how I did this.]]></summary></entry><entry><title type="html">Creating braingdx: orthogonal tilemaps</title><link href="https://bitbrain.github.io/2019/07/08/creating-braingdx-orthogonal-tilemaps.html" rel="alternate" type="text/html" title="Creating braingdx: orthogonal tilemaps" /><published>2019-07-08T00:00:00+00:00</published><updated>2019-07-08T00:00:00+00:00</updated><id>https://bitbrain.github.io/2019/07/08/creating-braingdx-orthogonal-tilemaps</id><content type="html" xml:base="https://bitbrain.github.io/2019/07/08/creating-braingdx-orthogonal-tilemaps.html"><![CDATA[<p>Welcome to my new blog series where I talk in more detail about a personal project of mine called <a href="https://github.com/bitbrain/braingdx">braingdx</a>. It builds upon <a href="https://libgdx.badlogicgames.com">libgdx</a> and extends it <a href="https://github.com/bitbrain/braingdx#features">with game engine features</a> to avoid writing boilerplate-code.</p>

<p>In this part I will present how the tiledmap integration works in <strong>braingdx</strong> compared to <strong>libgdx</strong> itself. As mentioned before, this framework uses <strong>libgdx</strong> and its APIs in order to integrate tiled maps.</p>

<h2 id="why-extending-already-existing-tiledmap-support">Why extending already existing tiledmap support?</h2>

<p>Before I started writing my own framework, I would use something like this to get tiledmaps drawn onto screen:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* somewhere in your create() method */</span>
<span class="k">this</span><span class="o">.</span><span class="na">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OrthographicCamera</span><span class="o">();</span>
<span class="n">camera</span><span class="o">.</span><span class="na">setToOrtho</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="nc">Gdx</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="nc">Gdx</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
<span class="n">camera</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>

<span class="k">this</span><span class="o">.</span><span class="na">tiledMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TmxMapLoader</span><span class="o">().</span><span class="na">load</span><span class="o">(</span><span class="s">"orthogonal-map.tmx"</span><span class="o">);</span>
<span class="k">this</span><span class="o">.</span><span class="na">tiledMapRenderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OrthogonalTiledMapRenderer</span><span class="o">(</span><span class="n">tiledMap</span><span class="o">);</span>

<span class="cm">/* somewhere in your render() method */</span>
<span class="n">camera</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>
<span class="n">tiledMapRenderer</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="n">camera</span><span class="o">);</span>
<span class="n">tiledMapRenderer</span><span class="o">.</span><span class="na">render</span><span class="o">();</span>
</code></pre></div></div>
<p>This will render your multi-layered map onto the screen. Job is done then. Or  is it? Before I even started thinking about writing a tiledmap integration, I had to know the challenges ahead of me. I realised that using a simple <code class="language-plaintext highlighter-rouge">OrthogonalTiledMapRenderer</code> does not do the trick at all: the problem are game objects itself.</p>

<blockquote>
  <p>a game object is a stateful, dynamic object within a game world which represents anything the player can interact with: characters, items, events, etc.</p>
</blockquote>

<p>Given a multi-layered map like this in <a href="https://www.mapeditor.org/">Tiled</a>:</p>

<p><a href="https://bitbrain.itch.io/the-legend-of-studentenfutter"><img src="/public/media/legend-of-studentenfutter-screenshot.jpg" alt="los-screenshot" /></a></p>

<p>Do you note the bridge? How can I achieve that the player gets either rendered below the bridge (when walking beneath it) or is walking on the bridge? What about automatic collision detection? How can I prevent that the player is able to fall off the bridge, but can walk beneath it without problems? All these challenges can not be solved by using <code class="language-plaintext highlighter-rouge">OrthogonalTiledMapRenderer</code>.
Instead, you have to write your own z-index ordering logic. Don’t worry though, these challenges have been solved within <strong>braingdx</strong>:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* within braingdx you simply have this */</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nc">GameContext2D</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">TiledMap</span> <span class="n">map</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getAssetLoader</span><span class="o">().</span><span class="na">get</span><span class="o">(</span>
         <span class="s">"orthogonal-map.tmx"</span><span class="o">,</span>
         <span class="nc">TiledMap</span><span class="o">.</span><span class="na">class</span>
   <span class="o">);</span>
   <span class="c1">// Obtain the tiledmap manager from the game context</span>
   <span class="nc">TiledMapManager</span> <span class="n">tiledMapManager</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getTiledMapManager</span><span class="o">();</span>
   <span class="nc">TiledMapContext</span> <span class="n">tiledMapContext</span> <span class="o">=</span> <span class="n">tiledMapManager</span><span class="o">.</span><span class="na">load</span><span class="o">(</span>
         <span class="c1">// the map we want to load</span>
         <span class="n">map</span><span class="o">,</span>
         <span class="c1">// passing the internal Camera object</span>
         <span class="n">context</span><span class="o">.</span><span class="na">getGameCamera</span><span class="o">().</span><span class="na">getInternal</span><span class="o">()</span>
   <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>That’s all you need! In this blog series I am going to show you how I achieved that.</p>

<h2 id="how-braingdx-renders-stuff-onto-the-screen">How braingdx renders stuff onto the screen</h2>

<p>Before we get to the meat, let us talk a bit about how my framework actually displays stuff and why it does it that way. This is important to know so it becomes easier to integrate tiled maps directly into the framework:</p>

<p><img src="/public/media/braingdx-render-pipeline.png" alt="pipeline" /></p>

<p>The framework renders different layers onto each other which result in the final frame:</p>

<ol>
  <li>First, it renders the <strong>background</strong> layer, this is mostly something like a parallax layer or a static background image.</li>
  <li>Onto the background, we can now render the <strong>game world</strong>. Simply put, the game world contains dynamic <strong>game objects</strong> which can change attributes like position, shape, rotation etc. dynamically</li>
  <li>The lighting is rendered onto all previous layers.</li>
  <li>At last, we can now render the UI onto the screen</li>
</ol>

<p>Since this order is static, where do we render our tiled map? Rendering it as part of the background layer does not allow us to render game objects behind particular layers. So, we have to render the tiledmap somehow as part of the game world.</p>

<h2 id="bringing-everything-together">Bringing everything together</h2>

<p>Initially, I never wanted to write my own framework. Reinventing the wheel should be avoided whenever possible. We can save a ton of time by just using what already exists. However, in case of tiled maps I could not find a single solution which satisfies my requirements.</p>

<p>When creating this framework, I did not want to force new APIs onto the user - many parts are just re-using existing <a href="https://libgdx.badlogicgames.com">libgdx</a> APIs. In case of tiled maps, I found a very simple solution to my problem:</p>

<blockquote>
  <p><strong>braingdx</strong> treats each tiledmap layer as an individual <strong>game object</strong> and renders them as part of the <strong>world layer</strong>.</p>
</blockquote>

<p>Each <strong>game object</strong> has its own z-index, which defines the order in which game objects are rendered. When drawing tiledmap layers as part of the gameworld render process, it allows us to have dynamic ordering. However, this begs a question:</p>

<p><strong>What should be the z-index of a particular tiledmap layer?</strong></p>

<p>The formular looks as follows:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zIndex = (layerIndex + 1) * rows - yIndex
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">layerIndex</code> is the number of the layer, counting from <code class="language-plaintext highlighter-rouge">0</code> upwards. The <code class="language-plaintext highlighter-rouge">rows</code> attribute is the number of total rows as part of the tiled map. Finally, the <code class="language-plaintext highlighter-rouge">yIndex</code> is the vertical index of the cell, the particular game object is currently on.</p>

<p>As a concrete example, let’s imagine the following setup:</p>

<ul>
  <li>a <code class="language-plaintext highlighter-rouge">10x10</code> orthogonal tiledmap with a tile resolution of <code class="language-plaintext highlighter-rouge">32x32</code> pixels</li>
  <li>the map consists of <code class="language-plaintext highlighter-rouge">2</code> tiled layers and a single object layer in between those</li>
  <li>a player object is located on the object layer at position <code class="language-plaintext highlighter-rouge">x = 60, y = 110</code></li>
</ul>

<p><strong>braingdx</strong> will automatically compute the z-index according to the given properties.</p>

<p>At first, the framework calculates the so called <code class="language-plaintext highlighter-rouge">yIndex</code> as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yIndex = floor(110 / 32) = 3
</code></pre></div></div>
<p>So the game object is positioned at a <code class="language-plaintext highlighter-rouge">yIndex</code> of <strong>3</strong>. The framework does not have a concept of object layers, since each game object is rendered separately, depending on their position. Instead, <strong>braingdx</strong> only keeps tiledmap layers. A game object is always translated onto the layer underneath. So, a tiledmap layer above the game object will always be rendered above the game object. As a result, the <code class="language-plaintext highlighter-rouge">layerIndex</code> of the assigned tiledmap layer is <strong>0</strong>.</p>

<p>This results to the following computation:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zIndex = (0 + 1) * 10 - 3 = 7
</code></pre></div></div>
<p>So the player at its current position will have a <code class="language-plaintext highlighter-rouge">zIndex</code> of <strong>7</strong>. This is all done by <strong>braingdx</strong> internally. Since game objects are rendered in the order of their <code class="language-plaintext highlighter-rouge">zIndex</code> attribute, it is ensured that game objects can be dynamically drawn before or after a particular tiledmap layer.</p>

<h2 id="what-about-tiledmap-layers-then">What about tiledmap layers then?</h2>

<p>We have learned how <strong>braingdx</strong> computes <code class="language-plaintext highlighter-rouge">zIndex</code> of game objects and that all game objects are drawn in the order of that index value. However, what about the layers itself? You might remember, that <strong>braingdx</strong> treats an entire tiledmap layer as a single game object. This means that <strong>braingdx</strong> does the following when loading tiled maps:</p>

<ol>
  <li>iterate over all layers of the tiledMap</li>
  <li>in case of a object layer, add a new game object to the game world and assign all the properties such as dimensions, position, type etc. to the game object</li>
  <li>in case of a tiledmap layer, add a new game object to the game at position <code class="language-plaintext highlighter-rouge">x = 0, y = 0</code> and set the game object to <code class="language-plaintext highlighter-rouge">active = false</code>. This ensures that the layer itself is excluded from collision detection</li>
</ol>

<p>Since the framework separates the rendering of game objects, we have to define an own <code class="language-plaintext highlighter-rouge">GameObject2DRenderer</code> for our tiledmap objects:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrthogonalMapLayerRenderer</span> <span class="kd">extends</span> <span class="nc">GameObject2DRenderer</span> <span class="o">{</span>

   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TiledMapTileLayer</span> <span class="n">layer</span><span class="o">;</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OrthographicCamera</span> <span class="n">camera</span><span class="o">;</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TiledMap</span> <span class="n">map</span><span class="o">;</span>
   <span class="kd">private</span> <span class="nc">OrthogonalTiledMapRenderer</span> <span class="n">renderer</span><span class="o">;</span>

   <span class="nc">OrthogonalMapLayerRenderer</span><span class="o">(</span>
         <span class="nc">TiledMapTileLayer</span> <span class="n">layer</span><span class="o">,</span>
         <span class="nc">TiledMap</span> <span class="n">map</span><span class="o">,</span>
         <span class="nc">OrthographicCamera</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">layer</span> <span class="o">=</span> <span class="n">layer</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">camera</span> <span class="o">=</span> <span class="n">camera</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">map</span> <span class="o">=</span> <span class="n">map</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="nd">@Override</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="nc">GameObject</span> <span class="n">object</span><span class="o">,</span> <span class="nc">Batch</span> <span class="n">batch</span><span class="o">,</span> <span class="kt">float</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">// we dynamically create the renderer for performance/testing reasons</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">renderer</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OrthogonalTiledMapRenderer</span><span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="n">batch</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="nc">AnimatedTiledMapTile</span><span class="o">.</span><span class="na">updateAnimationBaseTime</span><span class="o">();</span>
      <span class="n">renderer</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="n">camera</span><span class="o">);</span>
      <span class="n">renderer</span><span class="o">.</span><span class="na">renderTileLayer</span><span class="o">(</span><span class="n">layer</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">render</code> method will be called whenever our tiledmap layer object gets drawn. Since we want to ensure that each layer has its own renderer, we have to generate the game object type for the tiledmap layer and register it to the <strong>RenderManager</strong>:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">id</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
<span class="n">context</span><span class="o">.</span><span class="na">getRenderManager</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">renderer</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>A lot of time is wasted during gamejams sorting out render issues with tiledmaps. Modern game engines like <strong>Unity</strong> or <strong>Unreal Engine</strong> will do that for you - however for us Java folks there is not a simple way. Most of the time, we copy-paste together config from gamedev forums or Github, but we always had to re-invent the wheel each time. With <strong>braingdx</strong> this changes everything!</p>

<p><a href="https://github.com/bitbrain/braingdx">Checkout braingdx</a> and see for yourself: it can save you a lot of time when participating in gamejams!</p>]]></content><author><name>bitbrain</name></author><category term="braingdx" /><category term="libgdx" /><category term="java" /><category term="gamedev" /><category term="tiled" /><category term="tmx" /><summary type="html"><![CDATA[Fist part of a blog-series about my gamejam framework called braingdx.]]></summary></entry><entry><title type="html">Game design: one finger to rule them all</title><link href="https://bitbrain.github.io/2019/05/10/one-finger-to-rule-them-all.html" rel="alternate" type="text/html" title="Game design: one finger to rule them all" /><published>2019-05-10T00:00:00+00:00</published><updated>2019-05-10T00:00:00+00:00</updated><id>https://bitbrain.github.io/2019/05/10/one-finger-to-rule-them-all</id><content type="html" xml:base="https://bitbrain.github.io/2019/05/10/one-finger-to-rule-them-all.html"><![CDATA[<p>Everyone owns a smartphone nowadays. People are swiping within their apps up and down, left and right, panning in and double tap  whenever they get the opportunity. What people definitely don’t want is having to use more than a single finger. When looking at popular apps like Instagram, Twitter or Boost, the entire UX flow is designed for single-hand use. Game developers such as <a href="https://king.com">King</a> have taken that principle to another level for a simple reason: <strong>Accessibility</strong>.</p>

<p>If you want your game to be played by the masses, it needs to be accessible. In order for a game to be accessible, it needs to be supported by the hardware and the user should not get confused how to actually play the game. Many mobile games have long and annoying tutorials, explaining the complex UI and input methods such as buttons and virtual HUDs. Personally, I always disliked the fact that controls are being emulated on smartphones via HUDs like this:</p>

<p><img src="https://icdn9.digitaltrends.com/image/fortnite-mobile-beginners-guide-gather-720x720.jpg" alt="fortnite-hud" /></p>

<p>Especially on a busy train or a cigarette in one hand, playing those kind of games can be quite tricky. Why don’t all mobile games just have simple <strong>One Finger to Rule them All</strong> controls?</p>

<h1 id="simple-controls-are-challenging">Simple controls are challenging</h1>

<p>There is a simple reason why so many games try to avoid simple input but instead use more complex input mechanisms: it can become rather complicated to communicate how the game can be played, when there is just a single input method! On the other hand, as a user I do not want to read through manuals or tutorials to learn how to actually play the game. Time is much better spent and there are so many games out there which do not require any tutorials whatsoever. Thus, designing a simple input system which can be just with just one finger is key. Before we can implement simple input, the following questions need to be answered:</p>

<ul>
  <li>how does the player know if he should swipe, pan or where to click?</li>
  <li>how do I prevent that the player accidentally uses wrong controls?</li>
  <li>how can I ensure the player learns the controls naturally by just trying out?</li>
</ul>

<p>Answering these questions gave me confidence to build all my games with simple controls. This made designing UI components rather hard but eventually paid of by having a really simple game experience.</p>

<blockquote>
  <p>The more limited the controls are, the more accessible the game is. However, the amount of input combinations decreases with limited controls.</p>
</blockquote>

<p>Finding the perfect balance between those two is the real challenge.</p>

<h1 id="a-first-approach">A first approach</h1>

<p>Currently I am working on a small game called <strong>scape</strong> - it is a fast-paced 2D platformer written in <a href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</a>, using my gamejam framework called <a href="https://github.com/bitbrain/braingdx">braingdx</a>. You play a little virus infecting a compuer system. I got inspired by <a href="https://yoo-ninja-free.en.uptodown.com/android">Yoo Ninja!</a>, one of my favourite Android games:</p>

<p><img src="https://img.utdstc.com/screen/13/yoo-ninja-free-1.jpg:l" alt="yoo-ninja" /></p>

<p>Basically, the idea is to reach the end of the level without falling out of bounds. Touch the screen to jump (and effectively flip gravity). This is how my game <strong>scape</strong> loks like:</p>

<p><img src="/public/media/scape-showcase.gif" alt="scape-showcase" /></p>

<p>The first thing the player does is touching the screen and one notices that the character will jump as a consequence. However, this has some impact on the initial game design:</p>

<ul>
  <li>the player should not be punished for not touching the screen initially</li>
  <li>the player should notice that he needs to do <em>something</em> in order to progress</li>
  <li>the player should also learn in the beginning what the consequences are if no action is taken</li>
</ul>

<p>To solve all these questions I did a simple trick: I placed a block in front of the player. As a result the player bumps into the block at some point, gets stuck and the moving camera will kill the player if out of bounds:</p>

<p><img src="/public/media/scape-tutorial-block.gif" alt="scape-block" /></p>

<p>The player has no other choice than trying to touch the screen. Each level has been designed so the player automatically initiates actions to play the game, without having an explicit tutorial:</p>

<p><img src="/public/media/scape-tutorial-block-skip.gif" alt="scape-block-skip" /></p>

<p>As a game designer, this is not obvious at first. Only after a couple of iterations I can eventually refine the level structure to ensure the best possible game experience.</p>

<h1 id="the-dark-side-of-the-moon">The dark side of the moon</h1>

<p>Having a character jump via touch is not the most difficult mechanic. The <strong>One Touch Mechanic</strong> made things especially more tricky when it came to menu flow:</p>

<ul>
  <li>how do I communicate to the player that he has to swipe in order to switch to the next level in the stage selection?</li>
  <li>how does a player know he needs to touch the screen to enter a level?</li>
  <li>how does a player know he requires to keep the screen touched to skip a cutscene?</li>
</ul>

<p>Those questions are just partially answered and I am currently about to rewrite the entire menu flow to improve on that drastically.</p>

<h1 id="into-the-future">Into the Future</h1>

<p>Currently I am refining the level design, updating assets and rewriting the level selection flow. In another blog article I am going to elaborate on that more detailed. Stay tuned!</p>]]></content><author><name>bitbrain</name></author><category term="gamedev" /><category term="devlog" /><category term="scape" /><category term="gamedesign" /><summary type="html"><![CDATA[I love creating games which can be played with just one touch]]></summary></entry><entry><title type="html">How to automatically publish your game to itch.io</title><link href="https://bitbrain.github.io/2019/02/18/automatically-publish-games-to-itchio.html" rel="alternate" type="text/html" title="How to automatically publish your game to itch.io" /><published>2019-02-18T00:00:00+00:00</published><updated>2019-02-18T00:00:00+00:00</updated><id>https://bitbrain.github.io/2019/02/18/automatically-publish-games-to-itchio</id><content type="html" xml:base="https://bitbrain.github.io/2019/02/18/automatically-publish-games-to-itchio.html"><![CDATA[<h1 id="motivation">Motivation</h1>

<blockquote>
  <p>why should I even upload my games automatically?</p>
</blockquote>

<p>This is a good question. Simple answer is, that during a gamejam you can fully concentrate on building your game. Especially, when the deadline is coming closer, you simply have to commit and push your changes, in order to trigger an automatic deployment of your game to itch.io:</p>

<ol>
  <li>make a code or asset change change locally</li>
  <li>commit your change via Git and push it to Github</li>
  <li>TravisCI automatically picks up your change and builds your game</li>
  <li>TravisCI automatically pushes the new build to itch.io</li>
</ol>

<p>This tutorial shows you how to do that!</p>

<h1 id="prequisites">Prequisites</h1>

<p>For this tutorial, we use the following technologies:</p>

<ul>
  <li><a href="https://github.com/">Github</a> to version control our game code</li>
  <li><a href="https://travis-ci.org">TravisCI</a> as a build agent to build our game</li>
  <li><a href="https://itch.io">itch.io</a> to host our game</li>
  <li><a href="https://itch.io/docs/butler/pushing.html">Butler</a> to upload our game builds to itch.io</li>
</ul>

<h1 id="setup-github-repository">Setup Github repository</h1>

<p>If not already done, create a Github repository to host our source code:</p>

<p><img src="/public/media/create-new-github-repo.png" alt="create-new-github-repo" /></p>

<h1 id="setup-itchio">Setup itch.io</h1>

<p>Before we can start uploading our first game, we need to create an itch.io game project:</p>

<p><img src="/public/media/create-new-game-project.png" alt="create-new-game-project" /></p>

<p>After your project is created, head over to your account settings to generate a new API key. This key is required so other services such as TravisCI are able to communicate with itch.io.</p>

<p><img src="/public/media/create-new-api-key.png" alt="create-new-api-key" /></p>

<h1 id="prepare-travisci-deployment">Prepare TravisCI deployment</h1>

<p>Once the repository exists and itch.io is prepared, we need to prepare TravisCI. This consists of the following steps:</p>

<ol>
  <li>create deployment script</li>
  <li>commit and push travis.yml</li>
  <li>prepare TravisCI project</li>
  <li>setup <code class="language-plaintext highlighter-rouge">BUTLER_API_KEY</code></li>
</ol>

<h1 id="create-deployment-script">Create deployment script</h1>

<p>This script will take your artifacts and push it to itch.io. Create a new file, called <code class="language-plaintext highlighter-rouge">deploy.sh</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">set</span> <span class="nt">-e</span>
<span class="nb">set</span> <span class="nt">-o</span> pipefail

<span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUTLER_API_KEY</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Unable to deploy! No BUTLER_API_KEY environment variable specified!"</span>
  <span class="nb">exit </span>1
<span class="k">fi

</span>prepare_butler<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Preparing butler..."</span>
    download_if_not_exist http://dl.itch.ovh/butler/linux-amd64/head/butler butler
    <span class="nb">chmod</span> +x butler
<span class="o">}</span>

prepare_and_push<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Push </span><span class="nv">$3</span><span class="s2"> build to itch.io..."</span>
    ./butler push <span class="nv">$2</span> <span class="nv">$1</span>:<span class="nv">$3</span>
<span class="o">}</span>

download_if_not_exist<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="nv">$2</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>curl <span class="nt">-L</span> <span class="nt">-O</span> <span class="nv">$1</span> <span class="o">&gt;</span> <span class="nv">$2</span>
    <span class="k">fi</span>
<span class="o">}</span>


<span class="nv">project</span><span class="o">=</span><span class="s2">"bitbrain/mygame"</span>
<span class="nv">artifact</span><span class="o">=</span><span class="s2">"mygame.jar"</span>
<span class="nv">platform</span><span class="o">=</span><span class="s2">"windows-linux-mac"</span>

prepare_butler

prepare_and_push <span class="nv">$project</span> <span class="nv">$artifact</span> <span class="nv">$platform</span>

<span class="nb">echo</span> <span class="s2">"Done."</span>
<span class="nb">exit </span>0
</code></pre></div></div>
<p>This script first checks, if the environment variable <code class="language-plaintext highlighter-rouge">BUTLER_API_KEY</code> is defined. This variable can be setup within Travis and is required for itch.io to authenticate your game upload.
Afterwards we define a bunch of helper functions. Then we download the latest version of <strong>butler</strong> and upload the game with it. Please ensure to configure the correct <code class="language-plaintext highlighter-rouge">project</code>.</p>

<h1 id="setup-travisyml">Setup .travis.yml</h1>

<p>This file is required by TravisCI to understand how to build your game. For example, you can setup a Java environment (for Java games) or Objective-C environment (for Unity games). TravisCI ensures that this environment is set up and it will build your game:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">language</span><span class="pi">:</span> <span class="s">android</span>
<span class="na">jdk</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">openjdk8</span>

<span class="na">android</span><span class="pi">:</span>
  <span class="na">components</span><span class="pi">:</span>
    <span class="c1"># The BuildTools version used by your project</span>
    <span class="pi">-</span> <span class="s">build-tools-26.0.2</span>

    <span class="c1"># The SDK version used to compile your project</span>
    <span class="pi">-</span> <span class="s">android-26</span>

<span class="na">script</span><span class="pi">:</span>
  <span class="s">echo "this is my game" &gt; mygame.jar</span>

<span class="na">after_script</span><span class="pi">:</span>
  <span class="s">chmod +x deploy.sh &amp;&amp; ./deploy.sh</span>

</code></pre></div></div>
<p>Feel free to create a different .yml for Java, C++ or even Android! Read more about that <a href="https://docs.travis-ci.com/user/reference/overview/">in the official docs</a>.</p>

<h1 id="prepare-travisci-project">Prepare TravisCI project</h1>

<p>Now we have to configure our TravisCI project. Head over to https://travis-ci.org, authenticate with your Github account and you should be able to import your Github project from there. Once imported, head over to the settings to configure environment variables:</p>

<p><img src="/public/media/travis-ci-head-to-settings.png" alt="travis-ci-head-to-settings" />
<img src="/public/media/travis-ci-add-butler-api-key.png" alt="travis-ci-add-butler-api-key" /></p>

<h1 id="run-the-build">Run the build</h1>

<p>Congratulations! You successfully set up the pipeline. Let’s run the build to see how your game automatically publishes:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Preparing butler...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 19.6M  100 19.6M    0     0  31.6M      0 --:--:-- --:--:-- --:--:-- 31.6M
Push windows-linux-mac build to itch.io...
• For channel `windows-linux-mac`: pushing first build
• Pushing 16 B (1 files, 0 dirs, 0 symlinks)
✓ Added 16 B fresh data
✓ 86 B patch (no savings)
• Build is now processing, should be up in a bit.
Use the `butler status bitbrain/mygame:windows-linux-mac` for more information.
Done.
</code></pre></div></div>
<p>Your latest game version is now available on itch.io:</p>

<p><img src="/public/media/itch-io-my-game-upload.png" alt="itch-io-my-game-upload" /></p>]]></content><author><name>bitbrain</name></author><category term="itchio" /><category term="deployment" /><category term="travisci" /><category term="gamedev" /><summary type="html"><![CDATA[This tutorial explains how you can very easily deploy your game to itch.io]]></summary></entry></feed>